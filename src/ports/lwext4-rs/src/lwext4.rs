/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const CONFIG_USE_DEFAULT_CONFIG: u32 = 0;
pub const CONFIG_DEBUG_PRINTF: u32 = 0;
pub const CONFIG_DEBUG_ASSERT: u32 = 0;
pub const CONFIG_HAVE_OWN_OFLAGS: u32 = 1;
pub const CONFIG_HAVE_OWN_ERRNO: u32 = 0;
pub const CONFIG_BLOCK_DEV_CACHE_SIZE: u32 = 16;
pub const F_SET_EXT2: u32 = 2;
pub const F_SET_EXT3: u32 = 3;
pub const F_SET_EXT4: u32 = 4;
pub const CONFIG_EXT_FEATURE_SET_LVL: u32 = 4;
pub const CONFIG_JOURNALING_ENABLE: u32 = 1;
pub const CONFIG_XATTR_ENABLE: u32 = 1;
pub const CONFIG_EXTENTS_ENABLE: u32 = 1;
pub const CONFIG_HAVE_OWN_ASSERT: u32 = 1;
pub const CONFIG_BLOCK_DEV_ENABLE_STATS: u32 = 1;
pub const CONFIG_EXT4_MAX_BLOCKDEV_NAME: u32 = 32;
pub const CONFIG_EXT4_BLOCKDEVS_COUNT: u32 = 2;
pub const CONFIG_EXT4_MAX_MP_NAME: u32 = 32;
pub const CONFIG_EXT4_MOUNTPOINTS_COUNT: u32 = 2;
pub const CONFIG_MAX_TRUNCATE_SIZE: u32 = 16777216;
pub const CONFIG_UNALIGNED_ACCESS: u32 = 0;
pub const CONFIG_USE_USER_MALLOC: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const SPLAY_NEGINF: i32 = -1;
pub const SPLAY_INF: u32 = 1;
pub const RB_BLACK: u32 = 0;
pub const RB_RED: u32 = 1;
pub const RB_NEGINF: i32 = -1;
pub const RB_INF: u32 = 1;
pub const EXT4_CHECKSUM_CRC32C: u32 = 1;
pub const UUID_SIZE: u32 = 16;
pub const EXT4_SUPERBLOCK_MAGIC: u32 = 61267;
pub const EXT4_SUPERBLOCK_SIZE: u32 = 1024;
pub const EXT4_SUPERBLOCK_OFFSET: u32 = 1024;
pub const EXT4_SUPERBLOCK_OS_LINUX: u32 = 0;
pub const EXT4_SUPERBLOCK_OS_HURD: u32 = 1;
pub const EXT4_SUPERBLOCK_FLAGS_SIGNED_HASH: u32 = 1;
pub const EXT4_SUPERBLOCK_FLAGS_UNSIGNED_HASH: u32 = 2;
pub const EXT4_SUPERBLOCK_FLAGS_TEST_FILESYS: u32 = 4;
pub const EXT4_SUPERBLOCK_STATE_VALID_FS: u32 = 1;
pub const EXT4_SUPERBLOCK_STATE_ERROR_FS: u32 = 2;
pub const EXT4_SUPERBLOCK_STATE_ORPHAN_FS: u32 = 4;
pub const EXT4_SUPERBLOCK_ERRORS_CONTINUE: u32 = 1;
pub const EXT4_SUPERBLOCK_ERRORS_RO: u32 = 2;
pub const EXT4_SUPERBLOCK_ERRORS_PANIC: u32 = 3;
pub const EXT4_FCOM_DIR_PREALLOC: u32 = 1;
pub const EXT4_FCOM_IMAGIC_INODES: u32 = 2;
pub const EXT4_FCOM_HAS_JOURNAL: u32 = 4;
pub const EXT4_FCOM_EXT_ATTR: u32 = 8;
pub const EXT4_FCOM_RESIZE_INODE: u32 = 16;
pub const EXT4_FCOM_DIR_INDEX: u32 = 32;
pub const EXT4_FRO_COM_SPARSE_SUPER: u32 = 1;
pub const EXT4_FRO_COM_LARGE_FILE: u32 = 2;
pub const EXT4_FRO_COM_BTREE_DIR: u32 = 4;
pub const EXT4_FRO_COM_HUGE_FILE: u32 = 8;
pub const EXT4_FRO_COM_GDT_CSUM: u32 = 16;
pub const EXT4_FRO_COM_DIR_NLINK: u32 = 32;
pub const EXT4_FRO_COM_EXTRA_ISIZE: u32 = 64;
pub const EXT4_FRO_COM_QUOTA: u32 = 256;
pub const EXT4_FRO_COM_BIGALLOC: u32 = 512;
pub const EXT4_FRO_COM_METADATA_CSUM: u32 = 1024;
pub const EXT4_FINCOM_COMPRESSION: u32 = 1;
pub const EXT4_FINCOM_FILETYPE: u32 = 2;
pub const EXT4_FINCOM_RECOVER: u32 = 4;
pub const EXT4_FINCOM_JOURNAL_DEV: u32 = 8;
pub const EXT4_FINCOM_META_BG: u32 = 16;
pub const EXT4_FINCOM_EXTENTS: u32 = 64;
pub const EXT4_FINCOM_64BIT: u32 = 128;
pub const EXT4_FINCOM_MMP: u32 = 256;
pub const EXT4_FINCOM_FLEX_BG: u32 = 512;
pub const EXT4_FINCOM_EA_INODE: u32 = 1024;
pub const EXT4_FINCOM_DIRDATA: u32 = 4096;
pub const EXT4_FINCOM_BG_USE_META_CSUM: u32 = 8192;
pub const EXT4_FINCOM_LARGEDIR: u32 = 16384;
pub const EXT4_FINCOM_INLINE_DATA: u32 = 32768;
pub const EXT2_SUPPORTED_FCOM: u32 = 0;
pub const EXT2_SUPPORTED_FINCOM: u32 = 18;
pub const EXT2_SUPPORTED_FRO_COM: u32 = 3;
pub const EXT3_SUPPORTED_FCOM: u32 = 32;
pub const EXT3_SUPPORTED_FINCOM: u32 = 18;
pub const EXT3_SUPPORTED_FRO_COM: u32 = 3;
pub const EXT4_SUPPORTED_FCOM: u32 = 32;
pub const EXT4_SUPPORTED_FINCOM: u32 = 722;
pub const EXT4_SUPPORTED_FRO_COM: u32 = 1147;
pub const EXT_FINCOM_IGNORED: u32 = 260;
pub const EXT4_BLOCK_GROUP_INODE_UNINIT: u32 = 1;
pub const EXT4_BLOCK_GROUP_BLOCK_UNINIT: u32 = 2;
pub const EXT4_BLOCK_GROUP_ITABLE_ZEROED: u32 = 4;
pub const EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE: u32 = 32;
pub const EXT4_MAX_BLOCK_GROUP_DESCRIPTOR_SIZE: u32 = 64;
pub const EXT4_MIN_BLOCK_SIZE: u32 = 1024;
pub const EXT4_MAX_BLOCK_SIZE: u32 = 65536;
pub const EXT4_REV0_INODE_SIZE: u32 = 128;
pub const EXT4_INODE_BLOCK_SIZE: u32 = 512;
pub const EXT4_INODE_DIRECT_BLOCK_COUNT: u32 = 12;
pub const EXT4_INODE_INDIRECT_BLOCK: u32 = 12;
pub const EXT4_INODE_DOUBLE_INDIRECT_BLOCK: u32 = 13;
pub const EXT4_INODE_TRIPPLE_INDIRECT_BLOCK: u32 = 14;
pub const EXT4_INODE_BLOCKS: u32 = 15;
pub const EXT4_INODE_INDIRECT_BLOCK_COUNT: u32 = 3;
pub const EXT4_INODE_MODE_FIFO: u32 = 4096;
pub const EXT4_INODE_MODE_CHARDEV: u32 = 8192;
pub const EXT4_INODE_MODE_DIRECTORY: u32 = 16384;
pub const EXT4_INODE_MODE_BLOCKDEV: u32 = 24576;
pub const EXT4_INODE_MODE_FILE: u32 = 32768;
pub const EXT4_INODE_MODE_SOFTLINK: u32 = 40960;
pub const EXT4_INODE_MODE_SOCKET: u32 = 49152;
pub const EXT4_INODE_MODE_TYPE_MASK: u32 = 61440;
pub const EXT4_INODE_FLAG_SECRM: u32 = 1;
pub const EXT4_INODE_FLAG_UNRM: u32 = 2;
pub const EXT4_INODE_FLAG_COMPR: u32 = 4;
pub const EXT4_INODE_FLAG_SYNC: u32 = 8;
pub const EXT4_INODE_FLAG_IMMUTABLE: u32 = 16;
pub const EXT4_INODE_FLAG_APPEND: u32 = 32;
pub const EXT4_INODE_FLAG_NODUMP: u32 = 64;
pub const EXT4_INODE_FLAG_NOATIME: u32 = 128;
pub const EXT4_INODE_FLAG_DIRTY: u32 = 256;
pub const EXT4_INODE_FLAG_COMPRBLK: u32 = 512;
pub const EXT4_INODE_FLAG_NOCOMPR: u32 = 1024;
pub const EXT4_INODE_FLAG_ECOMPR: u32 = 2048;
pub const EXT4_INODE_FLAG_INDEX: u32 = 4096;
pub const EXT4_INODE_FLAG_IMAGIC: u32 = 8192;
pub const EXT4_INODE_FLAG_JOURNAL_DATA: u32 = 16384;
pub const EXT4_INODE_FLAG_NOTAIL: u32 = 32768;
pub const EXT4_INODE_FLAG_DIRSYNC: u32 = 65536;
pub const EXT4_INODE_FLAG_TOPDIR: u32 = 131072;
pub const EXT4_INODE_FLAG_HUGE_FILE: u32 = 262144;
pub const EXT4_INODE_FLAG_EXTENTS: u32 = 524288;
pub const EXT4_INODE_FLAG_EA_INODE: u32 = 2097152;
pub const EXT4_INODE_FLAG_EOFBLOCKS: u32 = 4194304;
pub const EXT4_INODE_FLAG_RESERVED: u32 = 2147483648;
pub const EXT4_INODE_ROOT_INDEX: u32 = 2;
pub const EXT4_DIRECTORY_FILENAME_LEN: u32 = 255;
pub const EXT4_DIRENTRY_DIR_CSUM: u32 = 222;
pub const EXT4_ERR_BAD_DX_DIR: i32 = -25000;
pub const EXT4_LINK_MAX: u32 = 65000;
pub const EXT4_BAD_INO: u32 = 1;
pub const EXT4_ROOT_INO: u32 = 2;
pub const EXT4_BOOT_LOADER_INO: u32 = 5;
pub const EXT4_UNDEL_DIR_INO: u32 = 6;
pub const EXT4_RESIZE_INO: u32 = 7;
pub const EXT4_JOURNAL_INO: u32 = 8;
pub const EXT4_GOOD_OLD_FIRST_INO: u32 = 11;
pub const EXT2_HTREE_LEGACY: u32 = 0;
pub const EXT2_HTREE_HALF_MD4: u32 = 1;
pub const EXT2_HTREE_TEA: u32 = 2;
pub const EXT2_HTREE_LEGACY_UNSIGNED: u32 = 3;
pub const EXT2_HTREE_HALF_MD4_UNSIGNED: u32 = 4;
pub const EXT2_HTREE_TEA_UNSIGNED: u32 = 5;
pub const EXT2_HTREE_EOF: u32 = 2147483647;
pub const EXT4_GOOD_OLD_INODE_SIZE: u32 = 128;
pub const JBD_MAGIC_NUMBER: u32 = 3225106840;
pub const JBD_DESCRIPTOR_BLOCK: u32 = 1;
pub const JBD_COMMIT_BLOCK: u32 = 2;
pub const JBD_SUPERBLOCK: u32 = 3;
pub const JBD_SUPERBLOCK_V2: u32 = 4;
pub const JBD_REVOKE_BLOCK: u32 = 5;
pub const JBD_CRC32_CHKSUM: u32 = 1;
pub const JBD_MD5_CHKSUM: u32 = 2;
pub const JBD_SHA1_CHKSUM: u32 = 3;
pub const JBD_CRC32C_CHKSUM: u32 = 4;
pub const JBD_CRC32_CHKSUM_SIZE: u32 = 4;
pub const JBD_FLAG_ESCAPE: u32 = 1;
pub const JBD_FLAG_SAME_UUID: u32 = 2;
pub const JBD_FLAG_DELETED: u32 = 4;
pub const JBD_FLAG_LAST_TAG: u32 = 8;
pub const JBD_USERS_MAX: u32 = 48;
pub const JBD_USERS_SIZE: u32 = 768;
pub const JBD_FEATURE_COMPAT_CHECKSUM: u32 = 1;
pub const JBD_FEATURE_INCOMPAT_REVOKE: u32 = 1;
pub const JBD_FEATURE_INCOMPAT_64BIT: u32 = 2;
pub const JBD_FEATURE_INCOMPAT_ASYNC_COMMIT: u32 = 4;
pub const JBD_FEATURE_INCOMPAT_CSUM_V2: u32 = 8;
pub const JBD_FEATURE_INCOMPAT_CSUM_V3: u32 = 16;
pub const JBD_KNOWN_COMPAT_FEATURES: u32 = 0;
pub const JBD_KNOWN_ROCOMPAT_FEATURES: u32 = 0;
pub const JBD_KNOWN_INCOMPAT_FEATURES: u32 = 31;
pub const EXT4_CRC32_INIT: u32 = 4294967295;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const ENOTSUP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const EIEIO: u32 = 4095;
pub const EOK: u32 = 0;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const __PRI64: &[u8; 2] = b"l\0";
pub const __PRIPTR: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const DEBUG_BALLOC: u32 = 1;
pub const DEBUG_BCACHE: u32 = 2;
pub const DEBUG_BITMAP: u32 = 4;
pub const DEBUG_BLOCK_GROUP: u32 = 8;
pub const DEBUG_BLOCKDEV: u32 = 16;
pub const DEBUG_DIR_IDX: u32 = 32;
pub const DEBUG_DIR: u32 = 64;
pub const DEBUG_EXTENT: u32 = 128;
pub const DEBUG_FS: u32 = 256;
pub const DEBUG_HASH: u32 = 512;
pub const DEBUG_IALLOC: u32 = 1024;
pub const DEBUG_INODE: u32 = 2048;
pub const DEBUG_SUPER: u32 = 4096;
pub const DEBUG_XATTR: u32 = 8192;
pub const DEBUG_MKFS: u32 = 16384;
pub const DEBUG_EXT4: u32 = 32768;
pub const DEBUG_JBD: u32 = 65536;
pub const DEBUG_MBR: u32 = 131072;
pub const DEBUG_NOPREFIX: u32 = 2147483648;
pub const DEBUG_ALL: u32 = 4294967295;
pub const DBG_NONE: &[u8; 1] = b"\0";
pub const DBG_INFO: &[u8; 9] = b"[info]  \0";
pub const DBG_WARN: &[u8; 9] = b"[warn]  \0";
pub const DBG_ERROR: &[u8; 9] = b"[error] \0";
pub type __mlibc_uint8 = ::std::os::raw::c_uchar;
pub type __mlibc_uint16 = ::std::os::raw::c_ushort;
pub type __mlibc_uint32 = ::std::os::raw::c_uint;
pub type __mlibc_uint64 = ::std::os::raw::c_ulong;
pub type __mlibc_int8 = ::std::os::raw::c_schar;
pub type __mlibc_int16 = ::std::os::raw::c_short;
pub type __mlibc_int32 = ::std::os::raw::c_int;
pub type __mlibc_int64 = ::std::os::raw::c_long;
pub type __mlibc_int_fast8 = __mlibc_int8;
pub type __mlibc_int_fast16 = __mlibc_int64;
pub type __mlibc_int_fast32 = __mlibc_int64;
pub type __mlibc_int_fast64 = __mlibc_int64;
pub type __mlibc_uint_fast8 = __mlibc_uint8;
pub type __mlibc_uint_fast16 = __mlibc_uint64;
pub type __mlibc_uint_fast32 = __mlibc_uint64;
pub type __mlibc_uint_fast64 = __mlibc_uint64;
pub type __mlibc_intmax = ::std::os::raw::c_long;
pub type __mlibc_intptr = ::std::os::raw::c_long;
pub type __mlibc_ptrdiff = ::std::os::raw::c_long;
pub type __mlibc_uintmax = ::std::os::raw::c_ulong;
pub type __mlibc_uintptr = ::std::os::raw::c_ulong;
pub type __mlibc_size = ::std::os::raw::c_ulong;
pub type int_least8_t = __mlibc_int8;
pub type int_least16_t = __mlibc_int16;
pub type int_least32_t = __mlibc_int32;
pub type int_least64_t = __mlibc_int64;
pub type uint_least8_t = __mlibc_uint8;
pub type uint_least16_t = __mlibc_uint16;
pub type uint_least32_t = __mlibc_uint32;
pub type uint_least64_t = __mlibc_uint64;
pub type int_fast8_t = __mlibc_int_fast8;
pub type int_fast16_t = __mlibc_int_fast16;
pub type int_fast32_t = __mlibc_int_fast32;
pub type int_fast64_t = __mlibc_int_fast64;
pub type uint_fast8_t = __mlibc_uint_fast8;
pub type uint_fast16_t = __mlibc_uint_fast16;
pub type uint_fast32_t = __mlibc_uint_fast32;
pub type uint_fast64_t = __mlibc_uint_fast64;
pub type intmax_t = __mlibc_intmax;
pub type uintmax_t = __mlibc_uintmax;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[doc = "@brief   Single block descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_block {
    #[doc = "@brief   Logical block ID"]
    pub lb_id: u64,
    #[doc = "@brief   Buffer"]
    pub buf: *mut ext4_buf,
    #[doc = "@brief   Data buffer."]
    pub data: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_block"][::std::mem::size_of::<ext4_block>() - 24usize];
    ["Alignment of ext4_block"][::std::mem::align_of::<ext4_block>() - 8usize];
    ["Offset of field: ext4_block::lb_id"][::std::mem::offset_of!(ext4_block, lb_id) - 0usize];
    ["Offset of field: ext4_block::buf"][::std::mem::offset_of!(ext4_block, buf) - 8usize];
    ["Offset of field: ext4_block::data"][::std::mem::offset_of!(ext4_block, data) - 16usize];
};
#[doc = "@brief   Single block descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf {
    #[doc = "@brief   Flags"]
    pub flags: ::std::os::raw::c_int,
    #[doc = "@brief   Logical block address"]
    pub lba: u64,
    #[doc = "@brief   Data buffer."]
    pub data: *mut u8,
    #[doc = "@brief   LRU priority. (unused)"]
    pub lru_prio: u32,
    #[doc = "@brief   LRU id."]
    pub lru_id: u32,
    #[doc = "@brief   Reference count table"]
    pub refctr: u32,
    #[doc = "@brief   The block cache this buffer belongs to."]
    pub bc: *mut ext4_bcache,
    #[doc = "@brief   Whether or not buffer is on dirty list."]
    pub on_dirty_list: bool,
    #[doc = "@brief   LBA tree node"]
    pub lba_node: ext4_buf__bindgen_ty_1,
    #[doc = "@brief   LRU tree node"]
    pub lru_node: ext4_buf__bindgen_ty_2,
    #[doc = "@brief   Dirty list node"]
    pub dirty_node: ext4_buf__bindgen_ty_3,
    #[doc = "@brief   Callback routine after a disk-write operation.\n @param   bc block cache descriptor\n @param   buf buffer descriptor\n @param   standard error code returned by bdev->bwrite()\n @param   arg argument passed to this routine"]
    pub end_write: ::std::option::Option<
        unsafe extern "C" fn(
            bc: *mut ext4_bcache,
            buf: *mut ext4_buf,
            res: ::std::os::raw::c_int,
            arg: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = "@brief   argument passed to end_write() callback."]
    pub end_write_arg: *mut ::std::os::raw::c_void,
}
#[doc = "@brief   LBA tree node"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_1 {
    pub rbe_left: *mut ext4_buf,
    pub rbe_right: *mut ext4_buf,
    pub rbe_parent: *mut ext4_buf,
    pub rbe_color: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_buf__bindgen_ty_1"][::std::mem::size_of::<ext4_buf__bindgen_ty_1>() - 32usize];
    ["Alignment of ext4_buf__bindgen_ty_1"]
        [::std::mem::align_of::<ext4_buf__bindgen_ty_1>() - 8usize];
    ["Offset of field: ext4_buf__bindgen_ty_1::rbe_left"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_1, rbe_left) - 0usize];
    ["Offset of field: ext4_buf__bindgen_ty_1::rbe_right"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_1, rbe_right) - 8usize];
    ["Offset of field: ext4_buf__bindgen_ty_1::rbe_parent"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_1, rbe_parent) - 16usize];
    ["Offset of field: ext4_buf__bindgen_ty_1::rbe_color"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_1, rbe_color) - 24usize];
};
#[doc = "@brief   LRU tree node"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_2 {
    pub rbe_left: *mut ext4_buf,
    pub rbe_right: *mut ext4_buf,
    pub rbe_parent: *mut ext4_buf,
    pub rbe_color: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_buf__bindgen_ty_2"][::std::mem::size_of::<ext4_buf__bindgen_ty_2>() - 32usize];
    ["Alignment of ext4_buf__bindgen_ty_2"]
        [::std::mem::align_of::<ext4_buf__bindgen_ty_2>() - 8usize];
    ["Offset of field: ext4_buf__bindgen_ty_2::rbe_left"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_2, rbe_left) - 0usize];
    ["Offset of field: ext4_buf__bindgen_ty_2::rbe_right"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_2, rbe_right) - 8usize];
    ["Offset of field: ext4_buf__bindgen_ty_2::rbe_parent"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_2, rbe_parent) - 16usize];
    ["Offset of field: ext4_buf__bindgen_ty_2::rbe_color"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_2, rbe_color) - 24usize];
};
#[doc = "@brief   Dirty list node"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_buf__bindgen_ty_3 {
    pub sle_next: *mut ext4_buf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_buf__bindgen_ty_3"][::std::mem::size_of::<ext4_buf__bindgen_ty_3>() - 8usize];
    ["Alignment of ext4_buf__bindgen_ty_3"]
        [::std::mem::align_of::<ext4_buf__bindgen_ty_3>() - 8usize];
    ["Offset of field: ext4_buf__bindgen_ty_3::sle_next"]
        [::std::mem::offset_of!(ext4_buf__bindgen_ty_3, sle_next) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_buf"][::std::mem::size_of::<ext4_buf>() - 144usize];
    ["Alignment of ext4_buf"][::std::mem::align_of::<ext4_buf>() - 8usize];
    ["Offset of field: ext4_buf::flags"][::std::mem::offset_of!(ext4_buf, flags) - 0usize];
    ["Offset of field: ext4_buf::lba"][::std::mem::offset_of!(ext4_buf, lba) - 8usize];
    ["Offset of field: ext4_buf::data"][::std::mem::offset_of!(ext4_buf, data) - 16usize];
    ["Offset of field: ext4_buf::lru_prio"][::std::mem::offset_of!(ext4_buf, lru_prio) - 24usize];
    ["Offset of field: ext4_buf::lru_id"][::std::mem::offset_of!(ext4_buf, lru_id) - 28usize];
    ["Offset of field: ext4_buf::refctr"][::std::mem::offset_of!(ext4_buf, refctr) - 32usize];
    ["Offset of field: ext4_buf::bc"][::std::mem::offset_of!(ext4_buf, bc) - 40usize];
    ["Offset of field: ext4_buf::on_dirty_list"]
        [::std::mem::offset_of!(ext4_buf, on_dirty_list) - 48usize];
    ["Offset of field: ext4_buf::lba_node"][::std::mem::offset_of!(ext4_buf, lba_node) - 56usize];
    ["Offset of field: ext4_buf::lru_node"][::std::mem::offset_of!(ext4_buf, lru_node) - 88usize];
    ["Offset of field: ext4_buf::dirty_node"]
        [::std::mem::offset_of!(ext4_buf, dirty_node) - 120usize];
    ["Offset of field: ext4_buf::end_write"]
        [::std::mem::offset_of!(ext4_buf, end_write) - 128usize];
    ["Offset of field: ext4_buf::end_write_arg"]
        [::std::mem::offset_of!(ext4_buf, end_write_arg) - 136usize];
};
#[doc = "@brief   Block cache descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache {
    #[doc = "@brief   Item count in block cache"]
    pub cnt: u32,
    #[doc = "@brief   Item size in block cache"]
    pub itemsize: u32,
    #[doc = "@brief   Last recently used counter"]
    pub lru_ctr: u32,
    #[doc = "@brief   Currently referenced datablocks"]
    pub ref_blocks: u32,
    #[doc = "@brief   Maximum referenced datablocks"]
    pub max_ref_blocks: u32,
    #[doc = "@brief   The blockdev binded to this block cache"]
    pub bdev: *mut ext4_blockdev,
    #[doc = "@brief   The cache should not be shaked"]
    pub dont_shake: bool,
    #[doc = "@brief   A tree holding all bufs"]
    pub lba_root: ext4_bcache_ext4_buf_lba,
    #[doc = "@brief   A tree holding unreferenced bufs"]
    pub lru_root: ext4_bcache_ext4_buf_lru,
    #[doc = "@brief   A singly-linked list holding dirty buffers"]
    pub dirty_list: ext4_bcache_ext4_buf_dirty,
}
#[doc = "@brief   A tree holding all bufs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_lba {
    pub rbh_root: *mut ext4_buf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_bcache_ext4_buf_lba"]
        [::std::mem::size_of::<ext4_bcache_ext4_buf_lba>() - 8usize];
    ["Alignment of ext4_bcache_ext4_buf_lba"]
        [::std::mem::align_of::<ext4_bcache_ext4_buf_lba>() - 8usize];
    ["Offset of field: ext4_bcache_ext4_buf_lba::rbh_root"]
        [::std::mem::offset_of!(ext4_bcache_ext4_buf_lba, rbh_root) - 0usize];
};
#[doc = "@brief   A tree holding unreferenced bufs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_lru {
    pub rbh_root: *mut ext4_buf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_bcache_ext4_buf_lru"]
        [::std::mem::size_of::<ext4_bcache_ext4_buf_lru>() - 8usize];
    ["Alignment of ext4_bcache_ext4_buf_lru"]
        [::std::mem::align_of::<ext4_bcache_ext4_buf_lru>() - 8usize];
    ["Offset of field: ext4_bcache_ext4_buf_lru::rbh_root"]
        [::std::mem::offset_of!(ext4_bcache_ext4_buf_lru, rbh_root) - 0usize];
};
#[doc = "@brief   A singly-linked list holding dirty buffers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bcache_ext4_buf_dirty {
    pub slh_first: *mut ext4_buf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_bcache_ext4_buf_dirty"]
        [::std::mem::size_of::<ext4_bcache_ext4_buf_dirty>() - 8usize];
    ["Alignment of ext4_bcache_ext4_buf_dirty"]
        [::std::mem::align_of::<ext4_bcache_ext4_buf_dirty>() - 8usize];
    ["Offset of field: ext4_bcache_ext4_buf_dirty::slh_first"]
        [::std::mem::offset_of!(ext4_bcache_ext4_buf_dirty, slh_first) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_bcache"][::std::mem::size_of::<ext4_bcache>() - 64usize];
    ["Alignment of ext4_bcache"][::std::mem::align_of::<ext4_bcache>() - 8usize];
    ["Offset of field: ext4_bcache::cnt"][::std::mem::offset_of!(ext4_bcache, cnt) - 0usize];
    ["Offset of field: ext4_bcache::itemsize"]
        [::std::mem::offset_of!(ext4_bcache, itemsize) - 4usize];
    ["Offset of field: ext4_bcache::lru_ctr"]
        [::std::mem::offset_of!(ext4_bcache, lru_ctr) - 8usize];
    ["Offset of field: ext4_bcache::ref_blocks"]
        [::std::mem::offset_of!(ext4_bcache, ref_blocks) - 12usize];
    ["Offset of field: ext4_bcache::max_ref_blocks"]
        [::std::mem::offset_of!(ext4_bcache, max_ref_blocks) - 16usize];
    ["Offset of field: ext4_bcache::bdev"][::std::mem::offset_of!(ext4_bcache, bdev) - 24usize];
    ["Offset of field: ext4_bcache::dont_shake"]
        [::std::mem::offset_of!(ext4_bcache, dont_shake) - 32usize];
    ["Offset of field: ext4_bcache::lba_root"]
        [::std::mem::offset_of!(ext4_bcache, lba_root) - 40usize];
    ["Offset of field: ext4_bcache::lru_root"]
        [::std::mem::offset_of!(ext4_bcache, lru_root) - 48usize];
    ["Offset of field: ext4_bcache::dirty_list"]
        [::std::mem::offset_of!(ext4_bcache, dirty_list) - 56usize];
};
pub const bcache_state_bits_BC_UPTODATE: bcache_state_bits = 0;
pub const bcache_state_bits_BC_DIRTY: bcache_state_bits = 1;
pub const bcache_state_bits_BC_FLUSH: bcache_state_bits = 2;
pub const bcache_state_bits_BC_TMP: bcache_state_bits = 3;
#[doc = "@brief buffer state bits\n\n  - BC♡UPTODATE: Buffer contains valid data.\n  - BC_DIRTY: Buffer is dirty.\n  - BC_FLUSH: Buffer will be immediately flushed,\n              when no one references it.\n  - BC_TMP: Buffer will be dropped once its refctr\n            reaches zero."]
pub type bcache_state_bits = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[doc = "@brief   Dynamic initialization of block cache.\n @param   bc block cache descriptor\n @param   cnt items count in block cache\n @param   itemsize single item size (in bytes)\n @return  standard error code"]
    pub fn ext4_bcache_init_dynamic(
        bc: *mut ext4_bcache,
        cnt: u32,
        itemsize: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Do cleanup works on block cache.\n @param   bc block cache descriptor."]
    pub fn ext4_bcache_cleanup(bc: *mut ext4_bcache);
}
unsafe extern "C" {
    #[doc = "@brief   Dynamic de-initialization of block cache.\n @param   bc block cache descriptor\n @return  standard error code"]
    pub fn ext4_bcache_fini_dynamic(bc: *mut ext4_bcache) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Get a buffer with the lowest LRU counter in bcache.\n @param   bc block cache descriptor\n @return  buffer with the lowest LRU counter"]
    pub fn ext4_buf_lowest_lru(bc: *mut ext4_bcache) -> *mut ext4_buf;
}
unsafe extern "C" {
    #[doc = "@brief   Drop unreferenced buffer from bcache.\n @param   bc block cache descriptor\n @param   buf buffer"]
    pub fn ext4_bcache_drop_buf(bc: *mut ext4_bcache, buf: *mut ext4_buf);
}
unsafe extern "C" {
    #[doc = "@brief   Invalidate a buffer.\n @param   bc block cache descriptor\n @param   buf buffer"]
    pub fn ext4_bcache_invalidate_buf(bc: *mut ext4_bcache, buf: *mut ext4_buf);
}
unsafe extern "C" {
    #[doc = "@brief   Invalidate a range of buffers.\n @param   bc block cache descriptor\n @param   from starting lba\n @param   cnt block counts"]
    pub fn ext4_bcache_invalidate_lba(bc: *mut ext4_bcache, from: u64, cnt: u32);
}
unsafe extern "C" {
    #[doc = "@brief   Find existing buffer from block cache memory.\n          Unreferenced block allocation is based on LRU\n          (Last Recently Used) algorithm.\n @param   bc block cache descriptor\n @param   b block to alloc\n @param   lba logical block address\n @return  block cache buffer"]
    pub fn ext4_bcache_find_get(
        bc: *mut ext4_bcache,
        b: *mut ext4_block,
        lba: u64,
    ) -> *mut ext4_buf;
}
unsafe extern "C" {
    #[doc = "@brief   Allocate block from block cache memory.\n          Unreferenced block allocation is based on LRU\n          (Last Recently Used) algorithm.\n @param   bc block cache descriptor\n @param   b block to alloc\n @param   is_new block is new (needs to be read)\n @return  standard error code"]
    pub fn ext4_bcache_alloc(
        bc: *mut ext4_bcache,
        b: *mut ext4_block,
        is_new: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Free block from cache memory (decrement reference counter).\n @param   bc block cache descriptor\n @param   b block to free\n @return  standard error code"]
    pub fn ext4_bcache_free(bc: *mut ext4_bcache, b: *mut ext4_block) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Return a full status of block cache.\n @param   bc block cache descriptor\n @return  full status"]
    pub fn ext4_bcache_is_full(bc: *mut ext4_bcache) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_blockdev_iface {
    #[doc = "@brief   Open device function\n @param   bdev block device."]
    pub open: ::std::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int,
    >,
    #[doc = "@brief   Block read function.\n @param   bdev block device\n @param   buf output buffer\n @param   blk_id block id\n @param   blk_cnt block count"]
    pub bread: ::std::option::Option<
        unsafe extern "C" fn(
            bdev: *mut ext4_blockdev,
            buf: *mut ::std::os::raw::c_void,
            blk_id: u64,
            blk_cnt: u32,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "@brief   Block write function.\n @param   buf input buffer\n @param   blk_id block id\n @param   blk_cnt block count"]
    pub bwrite: ::std::option::Option<
        unsafe extern "C" fn(
            bdev: *mut ext4_blockdev,
            buf: *const ::std::os::raw::c_void,
            blk_id: u64,
            blk_cnt: u32,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "@brief   Close device function.\n @param   bdev block device."]
    pub close: ::std::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int,
    >,
    #[doc = "@brief   Lock block device. Required in multi partition mode\n          operations. Not mandatory field.\n @param   bdev block device."]
    pub lock: ::std::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int,
    >,
    #[doc = "@brief   Unlock block device. Required in multi partition mode\n          operations. Not mandatory field.\n @param   bdev block device."]
    pub unlock: ::std::option::Option<
        unsafe extern "C" fn(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int,
    >,
    #[doc = "@brief   Block size (bytes): physical"]
    pub ph_bsize: u32,
    #[doc = "@brief   Block count: physical"]
    pub ph_bcnt: u64,
    #[doc = "@brief   Block size buffer: physical"]
    pub ph_bbuf: *mut u8,
    #[doc = "@brief   Reference counter to block device interface"]
    pub ph_refctr: u32,
    #[doc = "@brief   Physical read counter"]
    pub bread_ctr: u32,
    #[doc = "@brief   Physical write counter"]
    pub bwrite_ctr: u32,
    #[doc = "@brief   User data pointer"]
    pub p_user: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_blockdev_iface"][::std::mem::size_of::<ext4_blockdev_iface>() - 96usize];
    ["Alignment of ext4_blockdev_iface"][::std::mem::align_of::<ext4_blockdev_iface>() - 8usize];
    ["Offset of field: ext4_blockdev_iface::open"]
        [::std::mem::offset_of!(ext4_blockdev_iface, open) - 0usize];
    ["Offset of field: ext4_blockdev_iface::bread"]
        [::std::mem::offset_of!(ext4_blockdev_iface, bread) - 8usize];
    ["Offset of field: ext4_blockdev_iface::bwrite"]
        [::std::mem::offset_of!(ext4_blockdev_iface, bwrite) - 16usize];
    ["Offset of field: ext4_blockdev_iface::close"]
        [::std::mem::offset_of!(ext4_blockdev_iface, close) - 24usize];
    ["Offset of field: ext4_blockdev_iface::lock"]
        [::std::mem::offset_of!(ext4_blockdev_iface, lock) - 32usize];
    ["Offset of field: ext4_blockdev_iface::unlock"]
        [::std::mem::offset_of!(ext4_blockdev_iface, unlock) - 40usize];
    ["Offset of field: ext4_blockdev_iface::ph_bsize"]
        [::std::mem::offset_of!(ext4_blockdev_iface, ph_bsize) - 48usize];
    ["Offset of field: ext4_blockdev_iface::ph_bcnt"]
        [::std::mem::offset_of!(ext4_blockdev_iface, ph_bcnt) - 56usize];
    ["Offset of field: ext4_blockdev_iface::ph_bbuf"]
        [::std::mem::offset_of!(ext4_blockdev_iface, ph_bbuf) - 64usize];
    ["Offset of field: ext4_blockdev_iface::ph_refctr"]
        [::std::mem::offset_of!(ext4_blockdev_iface, ph_refctr) - 72usize];
    ["Offset of field: ext4_blockdev_iface::bread_ctr"]
        [::std::mem::offset_of!(ext4_blockdev_iface, bread_ctr) - 76usize];
    ["Offset of field: ext4_blockdev_iface::bwrite_ctr"]
        [::std::mem::offset_of!(ext4_blockdev_iface, bwrite_ctr) - 80usize];
    ["Offset of field: ext4_blockdev_iface::p_user"]
        [::std::mem::offset_of!(ext4_blockdev_iface, p_user) - 88usize];
};
#[doc = "@brief   Definition of the simple block device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_blockdev {
    #[doc = "@brief Block device interface"]
    pub bdif: *mut ext4_blockdev_iface,
    #[doc = "@brief Offset in bdif. For multi partition mode."]
    pub part_offset: u64,
    #[doc = "@brief Part size in bdif. For multi partition mode."]
    pub part_size: u64,
    #[doc = "@brief   Block cache."]
    pub bc: *mut ext4_bcache,
    #[doc = "@brief   Block size (bytes) logical"]
    pub lg_bsize: u32,
    #[doc = "@brief   Block count: logical"]
    pub lg_bcnt: u64,
    #[doc = "@brief   Cache write back mode reference counter"]
    pub cache_write_back: u32,
    #[doc = "@brief   The filesystem this block device belongs to."]
    pub fs: *mut ext4_fs,
    pub journal: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_blockdev"][::std::mem::size_of::<ext4_blockdev>() - 72usize];
    ["Alignment of ext4_blockdev"][::std::mem::align_of::<ext4_blockdev>() - 8usize];
    ["Offset of field: ext4_blockdev::bdif"][::std::mem::offset_of!(ext4_blockdev, bdif) - 0usize];
    ["Offset of field: ext4_blockdev::part_offset"]
        [::std::mem::offset_of!(ext4_blockdev, part_offset) - 8usize];
    ["Offset of field: ext4_blockdev::part_size"]
        [::std::mem::offset_of!(ext4_blockdev, part_size) - 16usize];
    ["Offset of field: ext4_blockdev::bc"][::std::mem::offset_of!(ext4_blockdev, bc) - 24usize];
    ["Offset of field: ext4_blockdev::lg_bsize"]
        [::std::mem::offset_of!(ext4_blockdev, lg_bsize) - 32usize];
    ["Offset of field: ext4_blockdev::lg_bcnt"]
        [::std::mem::offset_of!(ext4_blockdev, lg_bcnt) - 40usize];
    ["Offset of field: ext4_blockdev::cache_write_back"]
        [::std::mem::offset_of!(ext4_blockdev, cache_write_back) - 48usize];
    ["Offset of field: ext4_blockdev::fs"][::std::mem::offset_of!(ext4_blockdev, fs) - 56usize];
    ["Offset of field: ext4_blockdev::journal"]
        [::std::mem::offset_of!(ext4_blockdev, journal) - 64usize];
};
unsafe extern "C" {
    #[doc = "@brief   Block device initialization.\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_init(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Binds a bcache to block device.\n @param   bdev block device descriptor\n @param   bc block cache descriptor\n @return  standard error code"]
    pub fn ext4_block_bind_bcache(
        bdev: *mut ext4_blockdev,
        bc: *mut ext4_bcache,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Close block device\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_fini(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Flush data in given buffer to disk.\n @param   bdev block device descriptor\n @param   buf buffer\n @return  standard error code"]
    pub fn ext4_block_flush_buf(
        bdev: *mut ext4_blockdev,
        buf: *mut ext4_buf,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Flush data in buffer of given lba to disk,\n          if that buffer exists in block cache.\n @param   bdev block device descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_flush_lba(bdev: *mut ext4_blockdev, lba: u64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Set logical block size in block device.\n @param   bdev block device descriptor\n @param   lb_bsize logical block size (in bytes)"]
    pub fn ext4_block_set_lb_size(bdev: *mut ext4_blockdev, lb_bsize: u32);
}
unsafe extern "C" {
    #[doc = "@brief   Block get function (through cache, don't read).\n @param   bdev block device descriptor\n @param   b block descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_get_noread(
        bdev: *mut ext4_blockdev,
        b: *mut ext4_block,
        lba: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Block get function (through cache).\n @param   bdev block device descriptor\n @param   b block descriptor\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_block_get(
        bdev: *mut ext4_blockdev,
        b: *mut ext4_block,
        lba: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Block set procedure (through cache).\n @param   bdev block device descriptor\n @param   b block descriptor\n @return  standard error code"]
    pub fn ext4_block_set(bdev: *mut ext4_blockdev, b: *mut ext4_block) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Block read procedure (without cache)\n @param   bdev block device descriptor\n @param   buf output buffer\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_blocks_get_direct(
        bdev: *mut ext4_blockdev,
        buf: *mut ::std::os::raw::c_void,
        lba: u64,
        cnt: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Block write procedure (without cache)\n @param   bdev block device descriptor\n @param   buf output buffer\n @param   lba logical block address\n @return  standard error code"]
    pub fn ext4_blocks_set_direct(
        bdev: *mut ext4_blockdev,
        buf: *const ::std::os::raw::c_void,
        lba: u64,
        cnt: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Write to block device (by direct address).\n @param   bdev block device descriptor\n @param   off byte offset in block device\n @param   buf input buffer\n @param   len length of the write buffer\n @return  standard error code"]
    pub fn ext4_block_writebytes(
        bdev: *mut ext4_blockdev,
        off: u64,
        buf: *const ::std::os::raw::c_void,
        len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Read freom block device (by direct address).\n @param   bdev block device descriptor\n @param   off byte offset in block device\n @param   buf input buffer\n @param   len length of the write buffer\n @return  standard error code"]
    pub fn ext4_block_readbytes(
        bdev: *mut ext4_blockdev,
        off: u64,
        buf: *mut ::std::os::raw::c_void,
        len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Flush all dirty buffers to disk\n @param   bdev block device descriptor\n @return  standard error code"]
    pub fn ext4_block_cache_flush(bdev: *mut ext4_blockdev) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Enable/disable write back cache mode\n @param   bdev block device descriptor\n @param   on_off\n              !0 - ENABLE\n               0 - DISABLE (all delayed cache buffers will be flushed)\n @return  standard error code"]
    pub fn ext4_block_cache_write_back(
        bdev: *mut ext4_blockdev,
        on_off: u8,
    ) -> ::std::os::raw::c_int;
}
pub type ext4_lblk_t = u32;
pub type ext4_fsblk_t = u64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_sblock {
    pub inodes_count: u32,
    pub blocks_count_lo: u32,
    pub reserved_blocks_count_lo: u32,
    pub free_blocks_count_lo: u32,
    pub free_inodes_count: u32,
    pub first_data_block: u32,
    pub log_block_size: u32,
    pub log_cluster_size: u32,
    pub blocks_per_group: u32,
    pub frags_per_group: u32,
    pub inodes_per_group: u32,
    pub mount_time: u32,
    pub write_time: u32,
    pub mount_count: u16,
    pub max_mount_count: u16,
    pub magic: u16,
    pub state: u16,
    pub errors: u16,
    pub minor_rev_level: u16,
    pub last_check_time: u32,
    pub check_interval: u32,
    pub creator_os: u32,
    pub rev_level: u32,
    pub def_resuid: u16,
    pub def_resgid: u16,
    pub first_inode: u32,
    pub inode_size: u16,
    pub block_group_index: u16,
    pub features_compatible: u32,
    pub features_incompatible: u32,
    pub features_read_only: u32,
    pub uuid: [u8; 16usize],
    pub volume_name: [::std::os::raw::c_char; 16usize],
    pub last_mounted: [::std::os::raw::c_char; 64usize],
    pub algorithm_usage_bitmap: u32,
    pub s_prealloc_blocks: u8,
    pub s_prealloc_dir_blocks: u8,
    pub s_reserved_gdt_blocks: u16,
    pub journal_uuid: [u8; 16usize],
    pub journal_inode_number: u32,
    pub journal_dev: u32,
    pub last_orphan: u32,
    pub hash_seed: [u32; 4usize],
    pub default_hash_version: u8,
    pub journal_backup_type: u8,
    pub desc_size: u16,
    pub default_mount_opts: u32,
    pub first_meta_bg: u32,
    pub mkfs_time: u32,
    pub journal_blocks: [u32; 17usize],
    pub blocks_count_hi: u32,
    pub reserved_blocks_count_hi: u32,
    pub free_blocks_count_hi: u32,
    pub min_extra_isize: u16,
    pub want_extra_isize: u16,
    pub flags: u32,
    pub raid_stride: u16,
    pub mmp_interval: u16,
    pub mmp_block: u64,
    pub raid_stripe_width: u32,
    pub log_groups_per_flex: u8,
    pub checksum_type: u8,
    pub reserved_pad: u16,
    pub kbytes_written: u64,
    pub snapshot_inum: u32,
    pub snapshot_id: u32,
    pub snapshot_r_blocks_count: u64,
    pub snapshot_list: u32,
    pub error_count: u32,
    pub first_error_time: u32,
    pub first_error_ino: u32,
    pub first_error_block: u64,
    pub first_error_func: [u8; 32usize],
    pub first_error_line: u32,
    pub last_error_time: u32,
    pub last_error_ino: u32,
    pub last_error_line: u32,
    pub last_error_block: u64,
    pub last_error_func: [u8; 32usize],
    pub mount_opts: [u8; 64usize],
    pub usr_quota_inum: u32,
    pub grp_quota_inum: u32,
    pub overhead_clusters: u32,
    pub backup_bgs: [u32; 2usize],
    pub encrypt_algos: [u8; 4usize],
    pub encrypt_pw_salt: [u8; 16usize],
    pub lpf_ino: u32,
    pub padding: [u32; 100usize],
    pub checksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_sblock"][::std::mem::size_of::<ext4_sblock>() - 1024usize];
    ["Alignment of ext4_sblock"][::std::mem::align_of::<ext4_sblock>() - 1usize];
    ["Offset of field: ext4_sblock::inodes_count"]
        [::std::mem::offset_of!(ext4_sblock, inodes_count) - 0usize];
    ["Offset of field: ext4_sblock::blocks_count_lo"]
        [::std::mem::offset_of!(ext4_sblock, blocks_count_lo) - 4usize];
    ["Offset of field: ext4_sblock::reserved_blocks_count_lo"]
        [::std::mem::offset_of!(ext4_sblock, reserved_blocks_count_lo) - 8usize];
    ["Offset of field: ext4_sblock::free_blocks_count_lo"]
        [::std::mem::offset_of!(ext4_sblock, free_blocks_count_lo) - 12usize];
    ["Offset of field: ext4_sblock::free_inodes_count"]
        [::std::mem::offset_of!(ext4_sblock, free_inodes_count) - 16usize];
    ["Offset of field: ext4_sblock::first_data_block"]
        [::std::mem::offset_of!(ext4_sblock, first_data_block) - 20usize];
    ["Offset of field: ext4_sblock::log_block_size"]
        [::std::mem::offset_of!(ext4_sblock, log_block_size) - 24usize];
    ["Offset of field: ext4_sblock::log_cluster_size"]
        [::std::mem::offset_of!(ext4_sblock, log_cluster_size) - 28usize];
    ["Offset of field: ext4_sblock::blocks_per_group"]
        [::std::mem::offset_of!(ext4_sblock, blocks_per_group) - 32usize];
    ["Offset of field: ext4_sblock::frags_per_group"]
        [::std::mem::offset_of!(ext4_sblock, frags_per_group) - 36usize];
    ["Offset of field: ext4_sblock::inodes_per_group"]
        [::std::mem::offset_of!(ext4_sblock, inodes_per_group) - 40usize];
    ["Offset of field: ext4_sblock::mount_time"]
        [::std::mem::offset_of!(ext4_sblock, mount_time) - 44usize];
    ["Offset of field: ext4_sblock::write_time"]
        [::std::mem::offset_of!(ext4_sblock, write_time) - 48usize];
    ["Offset of field: ext4_sblock::mount_count"]
        [::std::mem::offset_of!(ext4_sblock, mount_count) - 52usize];
    ["Offset of field: ext4_sblock::max_mount_count"]
        [::std::mem::offset_of!(ext4_sblock, max_mount_count) - 54usize];
    ["Offset of field: ext4_sblock::magic"][::std::mem::offset_of!(ext4_sblock, magic) - 56usize];
    ["Offset of field: ext4_sblock::state"][::std::mem::offset_of!(ext4_sblock, state) - 58usize];
    ["Offset of field: ext4_sblock::errors"][::std::mem::offset_of!(ext4_sblock, errors) - 60usize];
    ["Offset of field: ext4_sblock::minor_rev_level"]
        [::std::mem::offset_of!(ext4_sblock, minor_rev_level) - 62usize];
    ["Offset of field: ext4_sblock::last_check_time"]
        [::std::mem::offset_of!(ext4_sblock, last_check_time) - 64usize];
    ["Offset of field: ext4_sblock::check_interval"]
        [::std::mem::offset_of!(ext4_sblock, check_interval) - 68usize];
    ["Offset of field: ext4_sblock::creator_os"]
        [::std::mem::offset_of!(ext4_sblock, creator_os) - 72usize];
    ["Offset of field: ext4_sblock::rev_level"]
        [::std::mem::offset_of!(ext4_sblock, rev_level) - 76usize];
    ["Offset of field: ext4_sblock::def_resuid"]
        [::std::mem::offset_of!(ext4_sblock, def_resuid) - 80usize];
    ["Offset of field: ext4_sblock::def_resgid"]
        [::std::mem::offset_of!(ext4_sblock, def_resgid) - 82usize];
    ["Offset of field: ext4_sblock::first_inode"]
        [::std::mem::offset_of!(ext4_sblock, first_inode) - 84usize];
    ["Offset of field: ext4_sblock::inode_size"]
        [::std::mem::offset_of!(ext4_sblock, inode_size) - 88usize];
    ["Offset of field: ext4_sblock::block_group_index"]
        [::std::mem::offset_of!(ext4_sblock, block_group_index) - 90usize];
    ["Offset of field: ext4_sblock::features_compatible"]
        [::std::mem::offset_of!(ext4_sblock, features_compatible) - 92usize];
    ["Offset of field: ext4_sblock::features_incompatible"]
        [::std::mem::offset_of!(ext4_sblock, features_incompatible) - 96usize];
    ["Offset of field: ext4_sblock::features_read_only"]
        [::std::mem::offset_of!(ext4_sblock, features_read_only) - 100usize];
    ["Offset of field: ext4_sblock::uuid"][::std::mem::offset_of!(ext4_sblock, uuid) - 104usize];
    ["Offset of field: ext4_sblock::volume_name"]
        [::std::mem::offset_of!(ext4_sblock, volume_name) - 120usize];
    ["Offset of field: ext4_sblock::last_mounted"]
        [::std::mem::offset_of!(ext4_sblock, last_mounted) - 136usize];
    ["Offset of field: ext4_sblock::algorithm_usage_bitmap"]
        [::std::mem::offset_of!(ext4_sblock, algorithm_usage_bitmap) - 200usize];
    ["Offset of field: ext4_sblock::s_prealloc_blocks"]
        [::std::mem::offset_of!(ext4_sblock, s_prealloc_blocks) - 204usize];
    ["Offset of field: ext4_sblock::s_prealloc_dir_blocks"]
        [::std::mem::offset_of!(ext4_sblock, s_prealloc_dir_blocks) - 205usize];
    ["Offset of field: ext4_sblock::s_reserved_gdt_blocks"]
        [::std::mem::offset_of!(ext4_sblock, s_reserved_gdt_blocks) - 206usize];
    ["Offset of field: ext4_sblock::journal_uuid"]
        [::std::mem::offset_of!(ext4_sblock, journal_uuid) - 208usize];
    ["Offset of field: ext4_sblock::journal_inode_number"]
        [::std::mem::offset_of!(ext4_sblock, journal_inode_number) - 224usize];
    ["Offset of field: ext4_sblock::journal_dev"]
        [::std::mem::offset_of!(ext4_sblock, journal_dev) - 228usize];
    ["Offset of field: ext4_sblock::last_orphan"]
        [::std::mem::offset_of!(ext4_sblock, last_orphan) - 232usize];
    ["Offset of field: ext4_sblock::hash_seed"]
        [::std::mem::offset_of!(ext4_sblock, hash_seed) - 236usize];
    ["Offset of field: ext4_sblock::default_hash_version"]
        [::std::mem::offset_of!(ext4_sblock, default_hash_version) - 252usize];
    ["Offset of field: ext4_sblock::journal_backup_type"]
        [::std::mem::offset_of!(ext4_sblock, journal_backup_type) - 253usize];
    ["Offset of field: ext4_sblock::desc_size"]
        [::std::mem::offset_of!(ext4_sblock, desc_size) - 254usize];
    ["Offset of field: ext4_sblock::default_mount_opts"]
        [::std::mem::offset_of!(ext4_sblock, default_mount_opts) - 256usize];
    ["Offset of field: ext4_sblock::first_meta_bg"]
        [::std::mem::offset_of!(ext4_sblock, first_meta_bg) - 260usize];
    ["Offset of field: ext4_sblock::mkfs_time"]
        [::std::mem::offset_of!(ext4_sblock, mkfs_time) - 264usize];
    ["Offset of field: ext4_sblock::journal_blocks"]
        [::std::mem::offset_of!(ext4_sblock, journal_blocks) - 268usize];
    ["Offset of field: ext4_sblock::blocks_count_hi"]
        [::std::mem::offset_of!(ext4_sblock, blocks_count_hi) - 336usize];
    ["Offset of field: ext4_sblock::reserved_blocks_count_hi"]
        [::std::mem::offset_of!(ext4_sblock, reserved_blocks_count_hi) - 340usize];
    ["Offset of field: ext4_sblock::free_blocks_count_hi"]
        [::std::mem::offset_of!(ext4_sblock, free_blocks_count_hi) - 344usize];
    ["Offset of field: ext4_sblock::min_extra_isize"]
        [::std::mem::offset_of!(ext4_sblock, min_extra_isize) - 348usize];
    ["Offset of field: ext4_sblock::want_extra_isize"]
        [::std::mem::offset_of!(ext4_sblock, want_extra_isize) - 350usize];
    ["Offset of field: ext4_sblock::flags"][::std::mem::offset_of!(ext4_sblock, flags) - 352usize];
    ["Offset of field: ext4_sblock::raid_stride"]
        [::std::mem::offset_of!(ext4_sblock, raid_stride) - 356usize];
    ["Offset of field: ext4_sblock::mmp_interval"]
        [::std::mem::offset_of!(ext4_sblock, mmp_interval) - 358usize];
    ["Offset of field: ext4_sblock::mmp_block"]
        [::std::mem::offset_of!(ext4_sblock, mmp_block) - 360usize];
    ["Offset of field: ext4_sblock::raid_stripe_width"]
        [::std::mem::offset_of!(ext4_sblock, raid_stripe_width) - 368usize];
    ["Offset of field: ext4_sblock::log_groups_per_flex"]
        [::std::mem::offset_of!(ext4_sblock, log_groups_per_flex) - 372usize];
    ["Offset of field: ext4_sblock::checksum_type"]
        [::std::mem::offset_of!(ext4_sblock, checksum_type) - 373usize];
    ["Offset of field: ext4_sblock::reserved_pad"]
        [::std::mem::offset_of!(ext4_sblock, reserved_pad) - 374usize];
    ["Offset of field: ext4_sblock::kbytes_written"]
        [::std::mem::offset_of!(ext4_sblock, kbytes_written) - 376usize];
    ["Offset of field: ext4_sblock::snapshot_inum"]
        [::std::mem::offset_of!(ext4_sblock, snapshot_inum) - 384usize];
    ["Offset of field: ext4_sblock::snapshot_id"]
        [::std::mem::offset_of!(ext4_sblock, snapshot_id) - 388usize];
    ["Offset of field: ext4_sblock::snapshot_r_blocks_count"]
        [::std::mem::offset_of!(ext4_sblock, snapshot_r_blocks_count) - 392usize];
    ["Offset of field: ext4_sblock::snapshot_list"]
        [::std::mem::offset_of!(ext4_sblock, snapshot_list) - 400usize];
    ["Offset of field: ext4_sblock::error_count"]
        [::std::mem::offset_of!(ext4_sblock, error_count) - 404usize];
    ["Offset of field: ext4_sblock::first_error_time"]
        [::std::mem::offset_of!(ext4_sblock, first_error_time) - 408usize];
    ["Offset of field: ext4_sblock::first_error_ino"]
        [::std::mem::offset_of!(ext4_sblock, first_error_ino) - 412usize];
    ["Offset of field: ext4_sblock::first_error_block"]
        [::std::mem::offset_of!(ext4_sblock, first_error_block) - 416usize];
    ["Offset of field: ext4_sblock::first_error_func"]
        [::std::mem::offset_of!(ext4_sblock, first_error_func) - 424usize];
    ["Offset of field: ext4_sblock::first_error_line"]
        [::std::mem::offset_of!(ext4_sblock, first_error_line) - 456usize];
    ["Offset of field: ext4_sblock::last_error_time"]
        [::std::mem::offset_of!(ext4_sblock, last_error_time) - 460usize];
    ["Offset of field: ext4_sblock::last_error_ino"]
        [::std::mem::offset_of!(ext4_sblock, last_error_ino) - 464usize];
    ["Offset of field: ext4_sblock::last_error_line"]
        [::std::mem::offset_of!(ext4_sblock, last_error_line) - 468usize];
    ["Offset of field: ext4_sblock::last_error_block"]
        [::std::mem::offset_of!(ext4_sblock, last_error_block) - 472usize];
    ["Offset of field: ext4_sblock::last_error_func"]
        [::std::mem::offset_of!(ext4_sblock, last_error_func) - 480usize];
    ["Offset of field: ext4_sblock::mount_opts"]
        [::std::mem::offset_of!(ext4_sblock, mount_opts) - 512usize];
    ["Offset of field: ext4_sblock::usr_quota_inum"]
        [::std::mem::offset_of!(ext4_sblock, usr_quota_inum) - 576usize];
    ["Offset of field: ext4_sblock::grp_quota_inum"]
        [::std::mem::offset_of!(ext4_sblock, grp_quota_inum) - 580usize];
    ["Offset of field: ext4_sblock::overhead_clusters"]
        [::std::mem::offset_of!(ext4_sblock, overhead_clusters) - 584usize];
    ["Offset of field: ext4_sblock::backup_bgs"]
        [::std::mem::offset_of!(ext4_sblock, backup_bgs) - 588usize];
    ["Offset of field: ext4_sblock::encrypt_algos"]
        [::std::mem::offset_of!(ext4_sblock, encrypt_algos) - 596usize];
    ["Offset of field: ext4_sblock::encrypt_pw_salt"]
        [::std::mem::offset_of!(ext4_sblock, encrypt_pw_salt) - 600usize];
    ["Offset of field: ext4_sblock::lpf_ino"]
        [::std::mem::offset_of!(ext4_sblock, lpf_ino) - 616usize];
    ["Offset of field: ext4_sblock::padding"]
        [::std::mem::offset_of!(ext4_sblock, padding) - 620usize];
    ["Offset of field: ext4_sblock::checksum"]
        [::std::mem::offset_of!(ext4_sblock, checksum) - 1020usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_bgroup {
    pub block_bitmap_lo: u32,
    pub inode_bitmap_lo: u32,
    pub inode_table_first_block_lo: u32,
    pub free_blocks_count_lo: u16,
    pub free_inodes_count_lo: u16,
    pub used_dirs_count_lo: u16,
    pub flags: u16,
    pub exclude_bitmap_lo: u32,
    pub block_bitmap_csum_lo: u16,
    pub inode_bitmap_csum_lo: u16,
    pub itable_unused_lo: u16,
    pub checksum: u16,
    pub block_bitmap_hi: u32,
    pub inode_bitmap_hi: u32,
    pub inode_table_first_block_hi: u32,
    pub free_blocks_count_hi: u16,
    pub free_inodes_count_hi: u16,
    pub used_dirs_count_hi: u16,
    pub itable_unused_hi: u16,
    pub exclude_bitmap_hi: u32,
    pub block_bitmap_csum_hi: u16,
    pub inode_bitmap_csum_hi: u16,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_bgroup"][::std::mem::size_of::<ext4_bgroup>() - 64usize];
    ["Alignment of ext4_bgroup"][::std::mem::align_of::<ext4_bgroup>() - 4usize];
    ["Offset of field: ext4_bgroup::block_bitmap_lo"]
        [::std::mem::offset_of!(ext4_bgroup, block_bitmap_lo) - 0usize];
    ["Offset of field: ext4_bgroup::inode_bitmap_lo"]
        [::std::mem::offset_of!(ext4_bgroup, inode_bitmap_lo) - 4usize];
    ["Offset of field: ext4_bgroup::inode_table_first_block_lo"]
        [::std::mem::offset_of!(ext4_bgroup, inode_table_first_block_lo) - 8usize];
    ["Offset of field: ext4_bgroup::free_blocks_count_lo"]
        [::std::mem::offset_of!(ext4_bgroup, free_blocks_count_lo) - 12usize];
    ["Offset of field: ext4_bgroup::free_inodes_count_lo"]
        [::std::mem::offset_of!(ext4_bgroup, free_inodes_count_lo) - 14usize];
    ["Offset of field: ext4_bgroup::used_dirs_count_lo"]
        [::std::mem::offset_of!(ext4_bgroup, used_dirs_count_lo) - 16usize];
    ["Offset of field: ext4_bgroup::flags"][::std::mem::offset_of!(ext4_bgroup, flags) - 18usize];
    ["Offset of field: ext4_bgroup::exclude_bitmap_lo"]
        [::std::mem::offset_of!(ext4_bgroup, exclude_bitmap_lo) - 20usize];
    ["Offset of field: ext4_bgroup::block_bitmap_csum_lo"]
        [::std::mem::offset_of!(ext4_bgroup, block_bitmap_csum_lo) - 24usize];
    ["Offset of field: ext4_bgroup::inode_bitmap_csum_lo"]
        [::std::mem::offset_of!(ext4_bgroup, inode_bitmap_csum_lo) - 26usize];
    ["Offset of field: ext4_bgroup::itable_unused_lo"]
        [::std::mem::offset_of!(ext4_bgroup, itable_unused_lo) - 28usize];
    ["Offset of field: ext4_bgroup::checksum"]
        [::std::mem::offset_of!(ext4_bgroup, checksum) - 30usize];
    ["Offset of field: ext4_bgroup::block_bitmap_hi"]
        [::std::mem::offset_of!(ext4_bgroup, block_bitmap_hi) - 32usize];
    ["Offset of field: ext4_bgroup::inode_bitmap_hi"]
        [::std::mem::offset_of!(ext4_bgroup, inode_bitmap_hi) - 36usize];
    ["Offset of field: ext4_bgroup::inode_table_first_block_hi"]
        [::std::mem::offset_of!(ext4_bgroup, inode_table_first_block_hi) - 40usize];
    ["Offset of field: ext4_bgroup::free_blocks_count_hi"]
        [::std::mem::offset_of!(ext4_bgroup, free_blocks_count_hi) - 44usize];
    ["Offset of field: ext4_bgroup::free_inodes_count_hi"]
        [::std::mem::offset_of!(ext4_bgroup, free_inodes_count_hi) - 46usize];
    ["Offset of field: ext4_bgroup::used_dirs_count_hi"]
        [::std::mem::offset_of!(ext4_bgroup, used_dirs_count_hi) - 48usize];
    ["Offset of field: ext4_bgroup::itable_unused_hi"]
        [::std::mem::offset_of!(ext4_bgroup, itable_unused_hi) - 50usize];
    ["Offset of field: ext4_bgroup::exclude_bitmap_hi"]
        [::std::mem::offset_of!(ext4_bgroup, exclude_bitmap_hi) - 52usize];
    ["Offset of field: ext4_bgroup::block_bitmap_csum_hi"]
        [::std::mem::offset_of!(ext4_bgroup, block_bitmap_csum_hi) - 56usize];
    ["Offset of field: ext4_bgroup::inode_bitmap_csum_hi"]
        [::std::mem::offset_of!(ext4_bgroup, inode_bitmap_csum_hi) - 58usize];
    ["Offset of field: ext4_bgroup::reserved"]
        [::std::mem::offset_of!(ext4_bgroup, reserved) - 60usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ext4_inode {
    pub mode: u16,
    pub uid: u16,
    pub size_lo: u32,
    pub access_time: u32,
    pub change_inode_time: u32,
    pub modification_time: u32,
    pub deletion_time: u32,
    pub gid: u16,
    pub links_count: u16,
    pub blocks_count_lo: u32,
    pub flags: u32,
    pub unused_osd1: u32,
    pub blocks: [u32; 15usize],
    pub generation: u32,
    pub file_acl_lo: u32,
    pub size_hi: u32,
    pub obso_faddr: u32,
    pub osd2: ext4_inode__bindgen_ty_1,
    pub extra_isize: u16,
    pub checksum_hi: u16,
    pub ctime_extra: u32,
    pub mtime_extra: u32,
    pub atime_extra: u32,
    pub crtime: u32,
    pub crtime_extra: u32,
    pub version_hi: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ext4_inode__bindgen_ty_1 {
    pub linux2: ext4_inode__bindgen_ty_1__bindgen_ty_1,
    pub hurd2: ext4_inode__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode__bindgen_ty_1__bindgen_ty_1 {
    pub blocks_high: u16,
    pub file_acl_high: u16,
    pub uid_high: u16,
    pub gid_high: u16,
    pub checksum_lo: u16,
    pub reserved2: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_inode__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ext4_inode__bindgen_ty_1__bindgen_ty_1>() - 12usize];
    ["Alignment of ext4_inode__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ext4_inode__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_1::blocks_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_1, blocks_high) - 0usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_1::file_acl_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_1, file_acl_high) - 2usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_1::uid_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_1, uid_high) - 4usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_1::gid_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_1, gid_high) - 6usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_1::checksum_lo"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_1, checksum_lo) - 8usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_1::reserved2"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_1, reserved2) - 10usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode__bindgen_ty_1__bindgen_ty_2 {
    pub reserved1: u16,
    pub mode_high: u16,
    pub uid_high: u16,
    pub gid_high: u16,
    pub author: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_inode__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ext4_inode__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of ext4_inode__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ext4_inode__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_2::reserved1"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_2, reserved1) - 0usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_2::mode_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_2, mode_high) - 2usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_2::uid_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_2, uid_high) - 4usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_2::gid_high"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_2, gid_high) - 6usize];
    ["Offset of field: ext4_inode__bindgen_ty_1__bindgen_ty_2::author"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1__bindgen_ty_2, author) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_inode__bindgen_ty_1"]
        [::std::mem::size_of::<ext4_inode__bindgen_ty_1>() - 12usize];
    ["Alignment of ext4_inode__bindgen_ty_1"]
        [::std::mem::align_of::<ext4_inode__bindgen_ty_1>() - 1usize];
    ["Offset of field: ext4_inode__bindgen_ty_1::linux2"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1, linux2) - 0usize];
    ["Offset of field: ext4_inode__bindgen_ty_1::hurd2"]
        [::std::mem::offset_of!(ext4_inode__bindgen_ty_1, hurd2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_inode"][::std::mem::size_of::<ext4_inode>() - 156usize];
    ["Alignment of ext4_inode"][::std::mem::align_of::<ext4_inode>() - 1usize];
    ["Offset of field: ext4_inode::mode"][::std::mem::offset_of!(ext4_inode, mode) - 0usize];
    ["Offset of field: ext4_inode::uid"][::std::mem::offset_of!(ext4_inode, uid) - 2usize];
    ["Offset of field: ext4_inode::size_lo"][::std::mem::offset_of!(ext4_inode, size_lo) - 4usize];
    ["Offset of field: ext4_inode::access_time"]
        [::std::mem::offset_of!(ext4_inode, access_time) - 8usize];
    ["Offset of field: ext4_inode::change_inode_time"]
        [::std::mem::offset_of!(ext4_inode, change_inode_time) - 12usize];
    ["Offset of field: ext4_inode::modification_time"]
        [::std::mem::offset_of!(ext4_inode, modification_time) - 16usize];
    ["Offset of field: ext4_inode::deletion_time"]
        [::std::mem::offset_of!(ext4_inode, deletion_time) - 20usize];
    ["Offset of field: ext4_inode::gid"][::std::mem::offset_of!(ext4_inode, gid) - 24usize];
    ["Offset of field: ext4_inode::links_count"]
        [::std::mem::offset_of!(ext4_inode, links_count) - 26usize];
    ["Offset of field: ext4_inode::blocks_count_lo"]
        [::std::mem::offset_of!(ext4_inode, blocks_count_lo) - 28usize];
    ["Offset of field: ext4_inode::flags"][::std::mem::offset_of!(ext4_inode, flags) - 32usize];
    ["Offset of field: ext4_inode::unused_osd1"]
        [::std::mem::offset_of!(ext4_inode, unused_osd1) - 36usize];
    ["Offset of field: ext4_inode::blocks"][::std::mem::offset_of!(ext4_inode, blocks) - 40usize];
    ["Offset of field: ext4_inode::generation"]
        [::std::mem::offset_of!(ext4_inode, generation) - 100usize];
    ["Offset of field: ext4_inode::file_acl_lo"]
        [::std::mem::offset_of!(ext4_inode, file_acl_lo) - 104usize];
    ["Offset of field: ext4_inode::size_hi"]
        [::std::mem::offset_of!(ext4_inode, size_hi) - 108usize];
    ["Offset of field: ext4_inode::obso_faddr"]
        [::std::mem::offset_of!(ext4_inode, obso_faddr) - 112usize];
    ["Offset of field: ext4_inode::osd2"][::std::mem::offset_of!(ext4_inode, osd2) - 116usize];
    ["Offset of field: ext4_inode::extra_isize"]
        [::std::mem::offset_of!(ext4_inode, extra_isize) - 128usize];
    ["Offset of field: ext4_inode::checksum_hi"]
        [::std::mem::offset_of!(ext4_inode, checksum_hi) - 130usize];
    ["Offset of field: ext4_inode::ctime_extra"]
        [::std::mem::offset_of!(ext4_inode, ctime_extra) - 132usize];
    ["Offset of field: ext4_inode::mtime_extra"]
        [::std::mem::offset_of!(ext4_inode, mtime_extra) - 136usize];
    ["Offset of field: ext4_inode::atime_extra"]
        [::std::mem::offset_of!(ext4_inode, atime_extra) - 140usize];
    ["Offset of field: ext4_inode::crtime"][::std::mem::offset_of!(ext4_inode, crtime) - 144usize];
    ["Offset of field: ext4_inode::crtime_extra"]
        [::std::mem::offset_of!(ext4_inode, crtime_extra) - 148usize];
    ["Offset of field: ext4_inode::version_hi"]
        [::std::mem::offset_of!(ext4_inode, version_hi) - 152usize];
};
pub const EXT4_DE_UNKNOWN: _bindgen_ty_1 = 0;
pub const EXT4_DE_REG_FILE: _bindgen_ty_1 = 1;
pub const EXT4_DE_DIR: _bindgen_ty_1 = 2;
pub const EXT4_DE_CHRDEV: _bindgen_ty_1 = 3;
pub const EXT4_DE_BLKDEV: _bindgen_ty_1 = 4;
pub const EXT4_DE_FIFO: _bindgen_ty_1 = 5;
pub const EXT4_DE_SOCK: _bindgen_ty_1 = 6;
pub const EXT4_DE_SYMLINK: _bindgen_ty_1 = 7;
#[doc = "@brief   Directory entry types."]
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ext4_dir_en_internal {
    pub name_length_high: u8,
    pub inode_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_en_internal"][::std::mem::size_of::<ext4_dir_en_internal>() - 1usize];
    ["Alignment of ext4_dir_en_internal"][::std::mem::align_of::<ext4_dir_en_internal>() - 1usize];
    ["Offset of field: ext4_dir_en_internal::name_length_high"]
        [::std::mem::offset_of!(ext4_dir_en_internal, name_length_high) - 0usize];
    ["Offset of field: ext4_dir_en_internal::inode_type"]
        [::std::mem::offset_of!(ext4_dir_en_internal, inode_type) - 0usize];
};
#[doc = " Linked list directory entry structure"]
#[repr(C, packed)]
pub struct ext4_dir_en {
    pub inode: u32,
    pub entry_len: u16,
    pub name_len: u8,
    pub in_: ext4_dir_en_internal,
    pub name: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_en"][::std::mem::size_of::<ext4_dir_en>() - 8usize];
    ["Alignment of ext4_dir_en"][::std::mem::align_of::<ext4_dir_en>() - 1usize];
    ["Offset of field: ext4_dir_en::inode"][::std::mem::offset_of!(ext4_dir_en, inode) - 0usize];
    ["Offset of field: ext4_dir_en::entry_len"]
        [::std::mem::offset_of!(ext4_dir_en, entry_len) - 4usize];
    ["Offset of field: ext4_dir_en::name_len"]
        [::std::mem::offset_of!(ext4_dir_en, name_len) - 6usize];
    ["Offset of field: ext4_dir_en::in_"][::std::mem::offset_of!(ext4_dir_en, in_) - 7usize];
    ["Offset of field: ext4_dir_en::name"][::std::mem::offset_of!(ext4_dir_en, name) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_climit {
    pub limit: u16,
    pub count: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_climit"][::std::mem::size_of::<ext4_dir_idx_climit>() - 4usize];
    ["Alignment of ext4_dir_idx_climit"][::std::mem::align_of::<ext4_dir_idx_climit>() - 1usize];
    ["Offset of field: ext4_dir_idx_climit::limit"]
        [::std::mem::offset_of!(ext4_dir_idx_climit, limit) - 0usize];
    ["Offset of field: ext4_dir_idx_climit::count"]
        [::std::mem::offset_of!(ext4_dir_idx_climit, count) - 2usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_dot_en {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
    pub name: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_dot_en"][::std::mem::size_of::<ext4_dir_idx_dot_en>() - 12usize];
    ["Alignment of ext4_dir_idx_dot_en"][::std::mem::align_of::<ext4_dir_idx_dot_en>() - 1usize];
    ["Offset of field: ext4_dir_idx_dot_en::inode"]
        [::std::mem::offset_of!(ext4_dir_idx_dot_en, inode) - 0usize];
    ["Offset of field: ext4_dir_idx_dot_en::entry_length"]
        [::std::mem::offset_of!(ext4_dir_idx_dot_en, entry_length) - 4usize];
    ["Offset of field: ext4_dir_idx_dot_en::name_length"]
        [::std::mem::offset_of!(ext4_dir_idx_dot_en, name_length) - 6usize];
    ["Offset of field: ext4_dir_idx_dot_en::inode_type"]
        [::std::mem::offset_of!(ext4_dir_idx_dot_en, inode_type) - 7usize];
    ["Offset of field: ext4_dir_idx_dot_en::name"]
        [::std::mem::offset_of!(ext4_dir_idx_dot_en, name) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_rinfo {
    pub reserved_zero: u32,
    pub hash_version: u8,
    pub info_length: u8,
    pub indirect_levels: u8,
    pub unused_flags: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_rinfo"][::std::mem::size_of::<ext4_dir_idx_rinfo>() - 8usize];
    ["Alignment of ext4_dir_idx_rinfo"][::std::mem::align_of::<ext4_dir_idx_rinfo>() - 1usize];
    ["Offset of field: ext4_dir_idx_rinfo::reserved_zero"]
        [::std::mem::offset_of!(ext4_dir_idx_rinfo, reserved_zero) - 0usize];
    ["Offset of field: ext4_dir_idx_rinfo::hash_version"]
        [::std::mem::offset_of!(ext4_dir_idx_rinfo, hash_version) - 4usize];
    ["Offset of field: ext4_dir_idx_rinfo::info_length"]
        [::std::mem::offset_of!(ext4_dir_idx_rinfo, info_length) - 5usize];
    ["Offset of field: ext4_dir_idx_rinfo::indirect_levels"]
        [::std::mem::offset_of!(ext4_dir_idx_rinfo, indirect_levels) - 6usize];
    ["Offset of field: ext4_dir_idx_rinfo::unused_flags"]
        [::std::mem::offset_of!(ext4_dir_idx_rinfo, unused_flags) - 7usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_entry {
    pub hash: u32,
    pub block: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_entry"][::std::mem::size_of::<ext4_dir_idx_entry>() - 8usize];
    ["Alignment of ext4_dir_idx_entry"][::std::mem::align_of::<ext4_dir_idx_entry>() - 1usize];
    ["Offset of field: ext4_dir_idx_entry::hash"]
        [::std::mem::offset_of!(ext4_dir_idx_entry, hash) - 0usize];
    ["Offset of field: ext4_dir_idx_entry::block"]
        [::std::mem::offset_of!(ext4_dir_idx_entry, block) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ext4_dir_idx_root {
    pub dots: [ext4_dir_idx_dot_en; 2usize],
    pub info: ext4_dir_idx_rinfo,
    pub en: __IncompleteArrayField<ext4_dir_idx_entry>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_root"][::std::mem::size_of::<ext4_dir_idx_root>() - 32usize];
    ["Alignment of ext4_dir_idx_root"][::std::mem::align_of::<ext4_dir_idx_root>() - 1usize];
    ["Offset of field: ext4_dir_idx_root::dots"]
        [::std::mem::offset_of!(ext4_dir_idx_root, dots) - 0usize];
    ["Offset of field: ext4_dir_idx_root::info"]
        [::std::mem::offset_of!(ext4_dir_idx_root, info) - 24usize];
    ["Offset of field: ext4_dir_idx_root::en"]
        [::std::mem::offset_of!(ext4_dir_idx_root, en) - 32usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_fake_dir_entry {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_fake_dir_entry"][::std::mem::size_of::<ext4_fake_dir_entry>() - 8usize];
    ["Alignment of ext4_fake_dir_entry"][::std::mem::align_of::<ext4_fake_dir_entry>() - 1usize];
    ["Offset of field: ext4_fake_dir_entry::inode"]
        [::std::mem::offset_of!(ext4_fake_dir_entry, inode) - 0usize];
    ["Offset of field: ext4_fake_dir_entry::entry_length"]
        [::std::mem::offset_of!(ext4_fake_dir_entry, entry_length) - 4usize];
    ["Offset of field: ext4_fake_dir_entry::name_length"]
        [::std::mem::offset_of!(ext4_fake_dir_entry, name_length) - 6usize];
    ["Offset of field: ext4_fake_dir_entry::inode_type"]
        [::std::mem::offset_of!(ext4_fake_dir_entry, inode_type) - 7usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ext4_dir_idx_node {
    pub fake: ext4_fake_dir_entry,
    pub entries: __IncompleteArrayField<ext4_dir_idx_entry>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_node"][::std::mem::size_of::<ext4_dir_idx_node>() - 8usize];
    ["Alignment of ext4_dir_idx_node"][::std::mem::align_of::<ext4_dir_idx_node>() - 1usize];
    ["Offset of field: ext4_dir_idx_node::fake"]
        [::std::mem::offset_of!(ext4_dir_idx_node, fake) - 0usize];
    ["Offset of field: ext4_dir_idx_node::entries"]
        [::std::mem::offset_of!(ext4_dir_idx_node, entries) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_idx_tail {
    pub reserved: u32,
    pub checksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_idx_tail"][::std::mem::size_of::<ext4_dir_idx_tail>() - 8usize];
    ["Alignment of ext4_dir_idx_tail"][::std::mem::align_of::<ext4_dir_idx_tail>() - 1usize];
    ["Offset of field: ext4_dir_idx_tail::reserved"]
        [::std::mem::offset_of!(ext4_dir_idx_tail, reserved) - 0usize];
    ["Offset of field: ext4_dir_idx_tail::checksum"]
        [::std::mem::offset_of!(ext4_dir_idx_tail, checksum) - 4usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_entry_tail {
    pub reserved_zero1: u32,
    pub rec_len: u16,
    pub reserved_zero2: u8,
    pub reserved_ft: u8,
    pub checksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_entry_tail"][::std::mem::size_of::<ext4_dir_entry_tail>() - 12usize];
    ["Alignment of ext4_dir_entry_tail"][::std::mem::align_of::<ext4_dir_entry_tail>() - 1usize];
    ["Offset of field: ext4_dir_entry_tail::reserved_zero1"]
        [::std::mem::offset_of!(ext4_dir_entry_tail, reserved_zero1) - 0usize];
    ["Offset of field: ext4_dir_entry_tail::rec_len"]
        [::std::mem::offset_of!(ext4_dir_entry_tail, rec_len) - 4usize];
    ["Offset of field: ext4_dir_entry_tail::reserved_zero2"]
        [::std::mem::offset_of!(ext4_dir_entry_tail, reserved_zero2) - 6usize];
    ["Offset of field: ext4_dir_entry_tail::reserved_ft"]
        [::std::mem::offset_of!(ext4_dir_entry_tail, reserved_ft) - 7usize];
    ["Offset of field: ext4_dir_entry_tail::checksum"]
        [::std::mem::offset_of!(ext4_dir_entry_tail, checksum) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_bhdr {
    pub magic: u32,
    pub blocktype: u32,
    pub sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_bhdr"][::std::mem::size_of::<jbd_bhdr>() - 12usize];
    ["Alignment of jbd_bhdr"][::std::mem::align_of::<jbd_bhdr>() - 1usize];
    ["Offset of field: jbd_bhdr::magic"][::std::mem::offset_of!(jbd_bhdr, magic) - 0usize];
    ["Offset of field: jbd_bhdr::blocktype"][::std::mem::offset_of!(jbd_bhdr, blocktype) - 4usize];
    ["Offset of field: jbd_bhdr::sequence"][::std::mem::offset_of!(jbd_bhdr, sequence) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_commit_header {
    pub header: jbd_bhdr,
    pub chksum_type: u8,
    pub chksum_size: u8,
    pub padding: [u8; 2usize],
    pub chksum: [u32; 8usize],
    pub commit_sec: u64,
    pub commit_nsec: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_commit_header"][::std::mem::size_of::<jbd_commit_header>() - 60usize];
    ["Alignment of jbd_commit_header"][::std::mem::align_of::<jbd_commit_header>() - 1usize];
    ["Offset of field: jbd_commit_header::header"]
        [::std::mem::offset_of!(jbd_commit_header, header) - 0usize];
    ["Offset of field: jbd_commit_header::chksum_type"]
        [::std::mem::offset_of!(jbd_commit_header, chksum_type) - 12usize];
    ["Offset of field: jbd_commit_header::chksum_size"]
        [::std::mem::offset_of!(jbd_commit_header, chksum_size) - 13usize];
    ["Offset of field: jbd_commit_header::padding"]
        [::std::mem::offset_of!(jbd_commit_header, padding) - 14usize];
    ["Offset of field: jbd_commit_header::chksum"]
        [::std::mem::offset_of!(jbd_commit_header, chksum) - 16usize];
    ["Offset of field: jbd_commit_header::commit_sec"]
        [::std::mem::offset_of!(jbd_commit_header, commit_sec) - 48usize];
    ["Offset of field: jbd_commit_header::commit_nsec"]
        [::std::mem::offset_of!(jbd_commit_header, commit_nsec) - 56usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tag3 {
    pub blocknr: u32,
    pub flags: u32,
    pub blocknr_high: u32,
    pub checksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_block_tag3"][::std::mem::size_of::<jbd_block_tag3>() - 16usize];
    ["Alignment of jbd_block_tag3"][::std::mem::align_of::<jbd_block_tag3>() - 1usize];
    ["Offset of field: jbd_block_tag3::blocknr"]
        [::std::mem::offset_of!(jbd_block_tag3, blocknr) - 0usize];
    ["Offset of field: jbd_block_tag3::flags"]
        [::std::mem::offset_of!(jbd_block_tag3, flags) - 4usize];
    ["Offset of field: jbd_block_tag3::blocknr_high"]
        [::std::mem::offset_of!(jbd_block_tag3, blocknr_high) - 8usize];
    ["Offset of field: jbd_block_tag3::checksum"]
        [::std::mem::offset_of!(jbd_block_tag3, checksum) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tag {
    pub blocknr: u32,
    pub checksum: u16,
    pub flags: u16,
    pub blocknr_high: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_block_tag"][::std::mem::size_of::<jbd_block_tag>() - 12usize];
    ["Alignment of jbd_block_tag"][::std::mem::align_of::<jbd_block_tag>() - 1usize];
    ["Offset of field: jbd_block_tag::blocknr"]
        [::std::mem::offset_of!(jbd_block_tag, blocknr) - 0usize];
    ["Offset of field: jbd_block_tag::checksum"]
        [::std::mem::offset_of!(jbd_block_tag, checksum) - 4usize];
    ["Offset of field: jbd_block_tag::flags"]
        [::std::mem::offset_of!(jbd_block_tag, flags) - 6usize];
    ["Offset of field: jbd_block_tag::blocknr_high"]
        [::std::mem::offset_of!(jbd_block_tag, blocknr_high) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_block_tail {
    pub checksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_block_tail"][::std::mem::size_of::<jbd_block_tail>() - 4usize];
    ["Alignment of jbd_block_tail"][::std::mem::align_of::<jbd_block_tail>() - 1usize];
    ["Offset of field: jbd_block_tail::checksum"]
        [::std::mem::offset_of!(jbd_block_tail, checksum) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_revoke_header {
    pub header: jbd_bhdr,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_revoke_header"][::std::mem::size_of::<jbd_revoke_header>() - 16usize];
    ["Alignment of jbd_revoke_header"][::std::mem::align_of::<jbd_revoke_header>() - 1usize];
    ["Offset of field: jbd_revoke_header::header"]
        [::std::mem::offset_of!(jbd_revoke_header, header) - 0usize];
    ["Offset of field: jbd_revoke_header::count"]
        [::std::mem::offset_of!(jbd_revoke_header, count) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_revoke_tail {
    pub checksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_revoke_tail"][::std::mem::size_of::<jbd_revoke_tail>() - 4usize];
    ["Alignment of jbd_revoke_tail"][::std::mem::align_of::<jbd_revoke_tail>() - 1usize];
    ["Offset of field: jbd_revoke_tail::checksum"]
        [::std::mem::offset_of!(jbd_revoke_tail, checksum) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_sb {
    pub header: jbd_bhdr,
    pub blocksize: u32,
    pub maxlen: u32,
    pub first: u32,
    pub sequence: u32,
    pub start: u32,
    pub error_val: i32,
    pub feature_compat: u32,
    pub feature_incompat: u32,
    pub feature_ro_compat: u32,
    pub uuid: [u8; 16usize],
    pub nr_users: u32,
    pub dynsuper: u32,
    pub max_transaction: u32,
    pub max_trandata: u32,
    pub checksum_type: u8,
    pub padding2: [u8; 3usize],
    pub padding: [u32; 42usize],
    pub checksum: u32,
    pub users: [u8; 768usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jbd_sb"][::std::mem::size_of::<jbd_sb>() - 1024usize];
    ["Alignment of jbd_sb"][::std::mem::align_of::<jbd_sb>() - 1usize];
    ["Offset of field: jbd_sb::header"][::std::mem::offset_of!(jbd_sb, header) - 0usize];
    ["Offset of field: jbd_sb::blocksize"][::std::mem::offset_of!(jbd_sb, blocksize) - 12usize];
    ["Offset of field: jbd_sb::maxlen"][::std::mem::offset_of!(jbd_sb, maxlen) - 16usize];
    ["Offset of field: jbd_sb::first"][::std::mem::offset_of!(jbd_sb, first) - 20usize];
    ["Offset of field: jbd_sb::sequence"][::std::mem::offset_of!(jbd_sb, sequence) - 24usize];
    ["Offset of field: jbd_sb::start"][::std::mem::offset_of!(jbd_sb, start) - 28usize];
    ["Offset of field: jbd_sb::error_val"][::std::mem::offset_of!(jbd_sb, error_val) - 32usize];
    ["Offset of field: jbd_sb::feature_compat"]
        [::std::mem::offset_of!(jbd_sb, feature_compat) - 36usize];
    ["Offset of field: jbd_sb::feature_incompat"]
        [::std::mem::offset_of!(jbd_sb, feature_incompat) - 40usize];
    ["Offset of field: jbd_sb::feature_ro_compat"]
        [::std::mem::offset_of!(jbd_sb, feature_ro_compat) - 44usize];
    ["Offset of field: jbd_sb::uuid"][::std::mem::offset_of!(jbd_sb, uuid) - 48usize];
    ["Offset of field: jbd_sb::nr_users"][::std::mem::offset_of!(jbd_sb, nr_users) - 64usize];
    ["Offset of field: jbd_sb::dynsuper"][::std::mem::offset_of!(jbd_sb, dynsuper) - 68usize];
    ["Offset of field: jbd_sb::max_transaction"]
        [::std::mem::offset_of!(jbd_sb, max_transaction) - 72usize];
    ["Offset of field: jbd_sb::max_trandata"]
        [::std::mem::offset_of!(jbd_sb, max_trandata) - 76usize];
    ["Offset of field: jbd_sb::checksum_type"]
        [::std::mem::offset_of!(jbd_sb, checksum_type) - 80usize];
    ["Offset of field: jbd_sb::padding2"][::std::mem::offset_of!(jbd_sb, padding2) - 81usize];
    ["Offset of field: jbd_sb::padding"][::std::mem::offset_of!(jbd_sb, padding) - 84usize];
    ["Offset of field: jbd_sb::checksum"][::std::mem::offset_of!(jbd_sb, checksum) - 252usize];
    ["Offset of field: jbd_sb::users"][::std::mem::offset_of!(jbd_sb, users) - 256usize];
};
unsafe extern "C" {
    pub static mut __mlibc_errno: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __progname: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __progname_full: *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__x: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__x: intmax_t, __y: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __string: *const ::std::os::raw::c_char,
        __end: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __string: *const ::std::os::raw::c_char,
        __end: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __string: *const wchar_t,
        __end: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __string: *const wchar_t,
        __end: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    #[doc = "@brief   Global mask debug set.\n @param   m new debug mask."]
    pub fn ext4_dmask_set(m: u32);
}
unsafe extern "C" {
    #[doc = "@brief   Global mask debug clear.\n @param   m new debug mask."]
    pub fn ext4_dmask_clr(m: u32);
}
unsafe extern "C" {
    #[doc = "@brief   Global debug mask get.\n @return  debug mask"]
    pub fn ext4_dmask_get() -> u32;
}
#[doc = "@brief   OS dependent lock interface."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_lock {
    #[doc = "@brief   Lock access to mount point."]
    pub lock: ::std::option::Option<unsafe extern "C" fn()>,
    #[doc = "@brief   Unlock access to mount point."]
    pub unlock: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_lock"][::std::mem::size_of::<ext4_lock>() - 16usize];
    ["Alignment of ext4_lock"][::std::mem::align_of::<ext4_lock>() - 8usize];
    ["Offset of field: ext4_lock::lock"][::std::mem::offset_of!(ext4_lock, lock) - 0usize];
    ["Offset of field: ext4_lock::unlock"][::std::mem::offset_of!(ext4_lock, unlock) - 8usize];
};
#[doc = "@brief   File descriptor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_file {
    #[doc = "@brief   Mount point handle."]
    pub mp: *mut ext4_mountpoint,
    #[doc = "@brief   File inode id."]
    pub inode: u32,
    #[doc = "@brief   Open flags."]
    pub flags: u32,
    #[doc = "@brief   File size."]
    pub fsize: u64,
    #[doc = "@brief   Actual file position."]
    pub fpos: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_file"][::std::mem::size_of::<ext4_file>() - 32usize];
    ["Alignment of ext4_file"][::std::mem::align_of::<ext4_file>() - 8usize];
    ["Offset of field: ext4_file::mp"][::std::mem::offset_of!(ext4_file, mp) - 0usize];
    ["Offset of field: ext4_file::inode"][::std::mem::offset_of!(ext4_file, inode) - 8usize];
    ["Offset of field: ext4_file::flags"][::std::mem::offset_of!(ext4_file, flags) - 12usize];
    ["Offset of field: ext4_file::fsize"][::std::mem::offset_of!(ext4_file, fsize) - 16usize];
    ["Offset of field: ext4_file::fpos"][::std::mem::offset_of!(ext4_file, fpos) - 24usize];
};
#[doc = "@brief   Directory entry descriptor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_direntry {
    pub inode: u32,
    pub entry_length: u16,
    pub name_length: u8,
    pub inode_type: u8,
    pub name: [u8; 255usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_direntry"][::std::mem::size_of::<ext4_direntry>() - 264usize];
    ["Alignment of ext4_direntry"][::std::mem::align_of::<ext4_direntry>() - 4usize];
    ["Offset of field: ext4_direntry::inode"]
        [::std::mem::offset_of!(ext4_direntry, inode) - 0usize];
    ["Offset of field: ext4_direntry::entry_length"]
        [::std::mem::offset_of!(ext4_direntry, entry_length) - 4usize];
    ["Offset of field: ext4_direntry::name_length"]
        [::std::mem::offset_of!(ext4_direntry, name_length) - 6usize];
    ["Offset of field: ext4_direntry::inode_type"]
        [::std::mem::offset_of!(ext4_direntry, inode_type) - 7usize];
    ["Offset of field: ext4_direntry::name"][::std::mem::offset_of!(ext4_direntry, name) - 8usize];
};
#[doc = "@brief   Directory descriptor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir {
    #[doc = "@brief   File descriptor."]
    pub f: ext4_file,
    #[doc = "@brief   Current directory entry."]
    pub de: ext4_direntry,
    #[doc = "@brief   Next entry offset."]
    pub next_off: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir"][::std::mem::size_of::<ext4_dir>() - 304usize];
    ["Alignment of ext4_dir"][::std::mem::align_of::<ext4_dir>() - 8usize];
    ["Offset of field: ext4_dir::f"][::std::mem::offset_of!(ext4_dir, f) - 0usize];
    ["Offset of field: ext4_dir::de"][::std::mem::offset_of!(ext4_dir, de) - 32usize];
    ["Offset of field: ext4_dir::next_off"][::std::mem::offset_of!(ext4_dir, next_off) - 296usize];
};
unsafe extern "C" {
    #[doc = "@brief   Register block device.\n\n @param   bd Block device.\n @param   dev_name Block device name.\n\n @return  Standard error code."]
    pub fn ext4_device_register(
        bd: *mut ext4_blockdev,
        dev_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Un-register block device.\n\n @param   dev_name Block device name.\n\n @return  Standard error code."]
    pub fn ext4_device_unregister(dev_name: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Un-register all block devices.\n\n @return  Standard error code."]
    pub fn ext4_device_unregister_all() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Mount a block device with EXT4 partition to the mount point.\n\n @param   dev_name Block device name (@ref ext4_device_register).\n @param   mount_point Mount point, for example:\n          -   /\n          -   /my_partition/\n          -   /my_second_partition/\n @param   read_only mount as read-only mode.\n\n @return Standard error code"]
    pub fn ext4_mount(
        dev_name: *const ::std::os::raw::c_char,
        mount_point: *const ::std::os::raw::c_char,
        read_only: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Umount operation.\n\n @param   mount_point Mount point.\n\n @return  Standard error code"]
    pub fn ext4_umount(mount_point: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_mountpoint {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn ext4_get_mount(path: *const ::std::os::raw::c_char) -> *mut ext4_mountpoint;
}
unsafe extern "C" {
    #[doc = "@brief   Starts journaling. Journaling start/stop functions are transparent\n          and might be used on filesystems without journaling support.\n @warning Usage:\n              ext4_mount(\"sda1\", \"/\");\n              ext4_journal_start(\"/\");\n\n              //File operations here...\n\n              ext4_journal_stop(\"/\");\n              ext4_umount(\"/\");\n @param   mount_point Mount point.\n\n @return  Standard error code."]
    pub fn ext4_journal_start(mount_point: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Stops journaling. Journaling start/stop functions are transparent\n          and might be used on filesystems without journaling support.\n\n @param   mount_point Mount point name.\n\n @return  Standard error code."]
    pub fn ext4_journal_stop(mount_point: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Journal recovery.\n @warning Must be called after @ref ext4_mount.\n\n @param   mount_point Mount point.\n\n @return Standard error code."]
    pub fn ext4_recover(mount_point: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[doc = "@brief   Some of the filesystem stats."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_mount_stats {
    pub inodes_count: u32,
    pub free_inodes_count: u32,
    pub blocks_count: u64,
    pub free_blocks_count: u64,
    pub block_size: u32,
    pub block_group_count: u32,
    pub blocks_per_group: u32,
    pub inodes_per_group: u32,
    pub volume_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_mount_stats"][::std::mem::size_of::<ext4_mount_stats>() - 56usize];
    ["Alignment of ext4_mount_stats"][::std::mem::align_of::<ext4_mount_stats>() - 8usize];
    ["Offset of field: ext4_mount_stats::inodes_count"]
        [::std::mem::offset_of!(ext4_mount_stats, inodes_count) - 0usize];
    ["Offset of field: ext4_mount_stats::free_inodes_count"]
        [::std::mem::offset_of!(ext4_mount_stats, free_inodes_count) - 4usize];
    ["Offset of field: ext4_mount_stats::blocks_count"]
        [::std::mem::offset_of!(ext4_mount_stats, blocks_count) - 8usize];
    ["Offset of field: ext4_mount_stats::free_blocks_count"]
        [::std::mem::offset_of!(ext4_mount_stats, free_blocks_count) - 16usize];
    ["Offset of field: ext4_mount_stats::block_size"]
        [::std::mem::offset_of!(ext4_mount_stats, block_size) - 24usize];
    ["Offset of field: ext4_mount_stats::block_group_count"]
        [::std::mem::offset_of!(ext4_mount_stats, block_group_count) - 28usize];
    ["Offset of field: ext4_mount_stats::blocks_per_group"]
        [::std::mem::offset_of!(ext4_mount_stats, blocks_per_group) - 32usize];
    ["Offset of field: ext4_mount_stats::inodes_per_group"]
        [::std::mem::offset_of!(ext4_mount_stats, inodes_per_group) - 36usize];
    ["Offset of field: ext4_mount_stats::volume_name"]
        [::std::mem::offset_of!(ext4_mount_stats, volume_name) - 40usize];
};
unsafe extern "C" {
    #[doc = "@brief   Get file mount point stats.\n\n @param   mount_point Mount point.\n @param   stats Filesystem stats.\n\n @return Standard error code."]
    pub fn ext4_mount_point_stats(
        mount_point: *const ::std::os::raw::c_char,
        stats: *mut ext4_mount_stats,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Setup OS lock routines.\n\n @param   mount_point Mount point.\n @param   locks  Lock and unlock functions\n\n @return Standard error code."]
    pub fn ext4_mount_setup_locks(
        mount_point: *const ::std::os::raw::c_char,
        locks: *const ext4_lock,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Acquire the filesystem superblock pointer of a mp.\n\n @param   mount_point Mount point.\n @param   sb Superblock handle\n\n @return Standard error code."]
    pub fn ext4_get_sblock(
        mount_point: *const ::std::os::raw::c_char,
        sb: *mut *mut ext4_sblock,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Enable/disable write back cache mode.\n @warning Default model of cache is write trough. It means that when You do:\n\n          ext4_fopen(...);\n          ext4_fwrite(...);\n                           < --- data is flushed to physical drive\n\n          When you do:\n          ext4_cache_write_back(..., 1);\n          ext4_fopen(...);\n          ext4_fwrite(...);\n                           < --- data is NOT flushed to physical drive\n          ext4_cache_write_back(..., 0);\n                           < --- when write back mode is disabled all\n                                 cache data will be flushed\n To enable write back mode permanently just call this function\n once after ext4_mount (and disable before ext4_umount).\n\n Some of the function use write back cache mode internally.\n If you enable write back mode twice you have to disable it twice\n to flush all data:\n\n      ext4_cache_write_back(..., 1);\n      ext4_cache_write_back(..., 1);\n\n      ext4_cache_write_back(..., 0);\n      ext4_cache_write_back(..., 0);\n\n Write back mode is useful when you want to create a lot of empty\n files/directories.\n\n @param   path Mount point.\n @param   on Enable/disable cache writeback mode.\n\n @return Standard error code."]
    pub fn ext4_cache_write_back(
        path: *const ::std::os::raw::c_char,
        on: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Force cache flush.\n\n @param   path Mount point.\n\n @return  Standard error code."]
    pub fn ext4_cache_flush(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Remove file by path.\n\n @param   path Path to file.\n\n @return  Standard error code."]
    pub fn ext4_fremove(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Create a hardlink for a file.\n\n @param   path Path to file.\n @param   hardlink_path Path of hardlink.\n\n @return  Standard error code."]
    pub fn ext4_flink(
        path: *const ::std::os::raw::c_char,
        hardlink_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Rename file.\n @param path Source.\n @param new_path Destination.\n @return  Standard error code."]
    pub fn ext4_frename(
        path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   File open function.\n\n @param   file  File handle.\n @param   path  File path, has to start from mount point:/my_partition/file.\n @param   flags File open flags.\n  |---------------------------------------------------------------|\n  |   r or rb                 O_RDONLY                            |\n  |---------------------------------------------------------------|\n  |   w or wb                 O_WRONLY|O_CREAT|O_TRUNC            |\n  |---------------------------------------------------------------|\n  |   a or ab                 O_WRONLY|O_CREAT|O_APPEND           |\n  |---------------------------------------------------------------|\n  |   r+ or rb+ or r+b        O_RDWR                              |\n  |---------------------------------------------------------------|\n  |   w+ or wb+ or w+b        O_RDWR|O_CREAT|O_TRUNC              |\n  |---------------------------------------------------------------|\n  |   a+ or ab+ or a+b        O_RDWR|O_CREAT|O_APPEND             |\n  |---------------------------------------------------------------|\n\n @return  Standard error code."]
    pub fn ext4_fopen(
        file: *mut ext4_file,
        path: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Alternate file open function.\n\n @param   file  File handle.\n @param   path  File path, has to start from mount point:/my_partition/file.\n @param   flags File open flags.\n\n @return  Standard error code."]
    pub fn ext4_fopen2(
        file: *mut ext4_file,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   File close function.\n\n @param   file File handle.\n\n @return  Standard error code."]
    pub fn ext4_fclose(file: *mut ext4_file) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   File truncate function.\n\n @param   file File handle.\n @param   size New file size.\n\n @return  Standard error code."]
    pub fn ext4_ftruncate(file: *mut ext4_file, size: u64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Read data from file.\n\n @param   file File handle.\n @param   buf  Output buffer.\n @param   size Bytes to read.\n @param   rcnt Bytes read (NULL allowed).\n\n @return  Standard error code."]
    pub fn ext4_fread(
        file: *mut ext4_file,
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        rcnt: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Write data to file.\n\n @param   file File handle.\n @param   buf  Data to write\n @param   size Write length..\n @param   wcnt Bytes written (NULL allowed).\n\n @return  Standard error code."]
    pub fn ext4_fwrite(
        file: *mut ext4_file,
        buf: *const ::std::os::raw::c_void,
        size: usize,
        wcnt: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   File seek operation.\n\n @param   file File handle.\n @param   offset Offset to seek.\n @param   origin Seek type:\n              @ref SEEK_SET\n              @ref SEEK_CUR\n              @ref SEEK_END\n\n @return  Standard error code."]
    pub fn ext4_fseek(file: *mut ext4_file, offset: i64, origin: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Get file position.\n\n @param   file File handle.\n\n @return  Actual file position"]
    pub fn ext4_ftell(file: *mut ext4_file) -> u64;
}
unsafe extern "C" {
    #[doc = "@brief   Get file size.\n\n @param   file File handle.\n\n @return  File size."]
    pub fn ext4_fsize(file: *mut ext4_file) -> u64;
}
unsafe extern "C" {
    #[doc = "@brief Get inode of file/directory/link.\n\n @param path    Parh to file/dir/link.\n @param ret_ino Inode number.\n @param inode   Inode internals.\n\n @return  Standard error code."]
    pub fn ext4_raw_inode_fill(
        path: *const ::std::os::raw::c_char,
        ret_ino: *mut u32,
        inode: *mut ext4_inode,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Check if inode exists.\n\n @param path    Parh to file/dir/link.\n @param type    Inode type.\n                @ref EXT4_DIRENTRY_UNKNOWN\n                @ref EXT4_DE_REG_FILE\n                @ref EXT4_DE_DIR\n                @ref EXT4_DE_CHRDEV\n                @ref EXT4_DE_BLKDEV\n                @ref EXT4_DE_FIFO\n                @ref EXT4_DE_SOCK\n                @ref EXT4_DE_SYMLINK\n\n @return  Standard error code."]
    pub fn ext4_inode_exist(
        path: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Change file/directory/link mode bits.\n\n @param path Path to file/dir/link.\n @param mode New mode bits (for example 0777).\n\n @return  Standard error code."]
    pub fn ext4_mode_set(path: *const ::std::os::raw::c_char, mode: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get file/directory/link mode bits.\n\n @param path Path to file/dir/link.\n @param mode New mode bits (for example 0777).\n\n @return  Standard error code."]
    pub fn ext4_mode_get(
        path: *const ::std::os::raw::c_char,
        mode: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Change file owner and group.\n\n @param path Path to file/dir/link.\n @param uid  User id.\n @param gid  Group id.\n\n @return  Standard error code."]
    pub fn ext4_owner_set(
        path: *const ::std::os::raw::c_char,
        uid: u32,
        gid: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get file/directory/link owner and group.\n\n @param path Path to file/dir/link.\n @param uid  User id.\n @param gid  Group id.\n\n @return  Standard error code."]
    pub fn ext4_owner_get(
        path: *const ::std::os::raw::c_char,
        uid: *mut u32,
        gid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Set file/directory/link access time.\n\n @param path  Path to file/dir/link.\n @param atime Access timestamp.\n\n @return  Standard error code."]
    pub fn ext4_atime_set(path: *const ::std::os::raw::c_char, atime: u32)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Set file/directory/link modify time.\n\n @param path  Path to file/dir/link.\n @param mtime Modify timestamp.\n\n @return  Standard error code."]
    pub fn ext4_mtime_set(path: *const ::std::os::raw::c_char, mtime: u32)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Set file/directory/link change time.\n\n @param path  Path to file/dir/link.\n @param ctime Change timestamp.\n\n @return  Standard error code."]
    pub fn ext4_ctime_set(path: *const ::std::os::raw::c_char, ctime: u32)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get file/directory/link access time.\n\n @param path  Path to file/dir/link.\n @param atime Access timestamp.\n\n @return  Standard error code."]
    pub fn ext4_atime_get(
        path: *const ::std::os::raw::c_char,
        atime: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get file/directory/link modify time.\n\n @param path  Path to file/dir/link.\n @param mtime Modify timestamp.\n\n @return  Standard error code."]
    pub fn ext4_mtime_get(
        path: *const ::std::os::raw::c_char,
        mtime: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get file/directory/link change time.\n\n @param path  Pathto file/dir/link.\n @param ctime Change timestamp.\n\n @return  standard error code"]
    pub fn ext4_ctime_get(
        path: *const ::std::os::raw::c_char,
        ctime: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Create symbolic link.\n\n @param target Destination entry path.\n @param path   Source entry path.\n\n @return  Standard error code."]
    pub fn ext4_fsymlink(
        target: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Create special file.\n @param path     Path to new special file.\n @param filetype Filetype of the new special file.\n \t           (that must not be regular file, directory, or unknown type)\n @param dev      If filetype is char device or block device,\n \t           the device number will become the payload in the inode.\n @return  Standard error code."]
    pub fn ext4_mknod(
        path: *const ::std::os::raw::c_char,
        filetype: ::std::os::raw::c_int,
        dev: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Read symbolic link payload.\n\n @param path    Path to symlink.\n @param buf     Output buffer.\n @param bufsize Output buffer max size.\n @param rcnt    Bytes read.\n\n @return  Standard error code."]
    pub fn ext4_readlink(
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        bufsize: usize,
        rcnt: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Set extended attribute.\n\n @param path      Path to file/directory\n @param name      Name of the entry to add.\n @param name_len  Length of @name in bytes.\n @param data      Data of the entry to add.\n @param data_size Size of data to add.\n\n @return  Standard error code."]
    pub fn ext4_setxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        data: *const ::std::os::raw::c_void,
        data_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get extended attribute.\n\n @param path      Path to file/directory.\n @param name      Name of the entry to get.\n @param name_len  Length of @name in bytes.\n @param buf      Data of the entry to get.\n @param buf_size Size of data to get.\n\n @return  Standard error code."]
    pub fn ext4_getxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
        data_size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief List extended attributes.\n\n @param path     Path to file/directory.\n @param list     List to hold the name of entries.\n @param size     Size of @list in bytes.\n @param ret_size Used bytes of @list.\n\n @return  Standard error code."]
    pub fn ext4_listxattr(
        path: *const ::std::os::raw::c_char,
        list: *mut ::std::os::raw::c_char,
        size: usize,
        ret_size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Remove extended attribute.\n\n @param path     Path to file/directory.\n @param name     Name of the entry to remove.\n @param name_len Length of @name in bytes.\n\n @return  Standard error code."]
    pub fn ext4_removexattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Recursive directory remove.\n\n @param   path Directory path to remove\n\n @return  Standard error code."]
    pub fn ext4_dir_rm(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Rename/move directory.\n\n @param path     Source path.\n @param new_path Destination path.\n\n @return  Standard error code."]
    pub fn ext4_dir_mv(
        path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Create new directory.\n\n @param   path Directory name.\n\n @return  Standard error code."]
    pub fn ext4_dir_mk(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Directory open.\n\n @param   dir  Directory handle.\n @param   path Directory path.\n\n @return  Standard error code."]
    pub fn ext4_dir_open(
        dir: *mut ext4_dir,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Directory close.\n\n @param   dir directory handle.\n\n @return  Standard error code."]
    pub fn ext4_dir_close(dir: *mut ext4_dir) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Return next directory entry.\n\n @param   dir Directory handle.\n\n @return  Directory entry id (NULL if no entry)"]
    pub fn ext4_dir_entry_next(dir: *mut ext4_dir) -> *const ext4_direntry;
}
unsafe extern "C" {
    #[doc = "@brief   Rewine directory entry offset.\n\n @param   dir Directory handle."]
    pub fn ext4_dir_entry_rewind(dir: *mut ext4_dir);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_fs {
    pub read_only: bool,
    pub bdev: *mut ext4_blockdev,
    pub sb: ext4_sblock,
    pub inode_block_limits: [u64; 4usize],
    pub inode_blocks_per_level: [u64; 4usize],
    pub last_inode_bg_id: u32,
    pub jbd_fs: *mut jbd_fs,
    pub jbd_journal: *mut jbd_journal,
    pub curr_trans: *mut jbd_trans,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_fs"][::std::mem::size_of::<ext4_fs>() - 1136usize];
    ["Alignment of ext4_fs"][::std::mem::align_of::<ext4_fs>() - 8usize];
    ["Offset of field: ext4_fs::read_only"][::std::mem::offset_of!(ext4_fs, read_only) - 0usize];
    ["Offset of field: ext4_fs::bdev"][::std::mem::offset_of!(ext4_fs, bdev) - 8usize];
    ["Offset of field: ext4_fs::sb"][::std::mem::offset_of!(ext4_fs, sb) - 16usize];
    ["Offset of field: ext4_fs::inode_block_limits"]
        [::std::mem::offset_of!(ext4_fs, inode_block_limits) - 1040usize];
    ["Offset of field: ext4_fs::inode_blocks_per_level"]
        [::std::mem::offset_of!(ext4_fs, inode_blocks_per_level) - 1072usize];
    ["Offset of field: ext4_fs::last_inode_bg_id"]
        [::std::mem::offset_of!(ext4_fs, last_inode_bg_id) - 1104usize];
    ["Offset of field: ext4_fs::jbd_fs"][::std::mem::offset_of!(ext4_fs, jbd_fs) - 1112usize];
    ["Offset of field: ext4_fs::jbd_journal"]
        [::std::mem::offset_of!(ext4_fs, jbd_journal) - 1120usize];
    ["Offset of field: ext4_fs::curr_trans"]
        [::std::mem::offset_of!(ext4_fs, curr_trans) - 1128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_block_group_ref {
    pub block: ext4_block,
    pub block_group: *mut ext4_bgroup,
    pub fs: *mut ext4_fs,
    pub index: u32,
    pub dirty: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_block_group_ref"][::std::mem::size_of::<ext4_block_group_ref>() - 48usize];
    ["Alignment of ext4_block_group_ref"][::std::mem::align_of::<ext4_block_group_ref>() - 8usize];
    ["Offset of field: ext4_block_group_ref::block"]
        [::std::mem::offset_of!(ext4_block_group_ref, block) - 0usize];
    ["Offset of field: ext4_block_group_ref::block_group"]
        [::std::mem::offset_of!(ext4_block_group_ref, block_group) - 24usize];
    ["Offset of field: ext4_block_group_ref::fs"]
        [::std::mem::offset_of!(ext4_block_group_ref, fs) - 32usize];
    ["Offset of field: ext4_block_group_ref::index"]
        [::std::mem::offset_of!(ext4_block_group_ref, index) - 40usize];
    ["Offset of field: ext4_block_group_ref::dirty"]
        [::std::mem::offset_of!(ext4_block_group_ref, dirty) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_inode_ref {
    pub block: ext4_block,
    pub inode: *mut ext4_inode,
    pub fs: *mut ext4_fs,
    pub index: u32,
    pub dirty: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_inode_ref"][::std::mem::size_of::<ext4_inode_ref>() - 48usize];
    ["Alignment of ext4_inode_ref"][::std::mem::align_of::<ext4_inode_ref>() - 8usize];
    ["Offset of field: ext4_inode_ref::block"]
        [::std::mem::offset_of!(ext4_inode_ref, block) - 0usize];
    ["Offset of field: ext4_inode_ref::inode"]
        [::std::mem::offset_of!(ext4_inode_ref, inode) - 24usize];
    ["Offset of field: ext4_inode_ref::fs"][::std::mem::offset_of!(ext4_inode_ref, fs) - 32usize];
    ["Offset of field: ext4_inode_ref::index"]
        [::std::mem::offset_of!(ext4_inode_ref, index) - 40usize];
    ["Offset of field: ext4_inode_ref::dirty"]
        [::std::mem::offset_of!(ext4_inode_ref, dirty) - 44usize];
};
unsafe extern "C" {
    pub fn ext4_mountpoint_fs(mountpoint: *const ::std::os::raw::c_char) -> *mut ext4_fs;
}
unsafe extern "C" {
    #[doc = "@brief Initialize filesystem and read all needed data.\n @param fs Filesystem instance to be initialized\n @param bdev Identifier if device with the filesystem\n @param read_only Mark the filesystem as read-only.\n @return Error code"]
    pub fn ext4_fs_init(
        fs: *mut ext4_fs,
        bdev: *mut ext4_blockdev,
        read_only: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Destroy filesystem instance (used by unmount operation).\n @param fs Filesystem to be destroyed\n @return Error code"]
    pub fn ext4_fs_fini(fs: *mut ext4_fs) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Check filesystem's features, if supported by this driver\n Function can return EOK and set read_only flag. It mean's that\n there are some not-supported features, that can cause problems\n during some write operations.\n @param fs        Filesystem to be checked\n @param read_only Flag if filesystem should be mounted only for reading\n @return Error code"]
    pub fn ext4_fs_check_features(fs: *mut ext4_fs, read_only: *mut bool) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get reference to block group specified by index.\n @param fs   Filesystem to find block group on\n @param bgid Index of block group to load\n @param ref  Output pointer for reference\n @return Error code"]
    pub fn ext4_fs_get_block_group_ref(
        fs: *mut ext4_fs,
        bgid: u32,
        ref_: *mut ext4_block_group_ref,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Put reference to block group.\n @param ref Pointer for reference to be put back\n @return Error code"]
    pub fn ext4_fs_put_block_group_ref(ref_: *mut ext4_block_group_ref) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get reference to i-node specified by index.\n @param fs    Filesystem to find i-node on\n @param index Index of i-node to load\n @param ref   Output pointer for reference\n @return Error code"]
    pub fn ext4_fs_get_inode_ref(
        fs: *mut ext4_fs,
        index: u32,
        ref_: *mut ext4_inode_ref,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Reset blocks field of i-node.\n @param fs        Filesystem to reset blocks field of i-inode on\n @param inode_ref ref Pointer for inode to be operated on"]
    pub fn ext4_fs_inode_blocks_init(fs: *mut ext4_fs, inode_ref: *mut ext4_inode_ref);
}
unsafe extern "C" {
    #[doc = "@brief Put reference to i-node.\n @param ref Pointer for reference to be put back\n @return Error code"]
    pub fn ext4_fs_put_inode_ref(ref_: *mut ext4_inode_ref) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Convert filetype to inode mode.\n @param filetype File type\n @return inode mode"]
    pub fn ext4_fs_correspond_inode_mode(filetype: ::std::os::raw::c_int) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Allocate new i-node in the filesystem.\n @param fs        Filesystem to allocated i-node on\n @param inode_ref Output pointer to return reference to allocated i-node\n @param filetype  File type of newly created i-node\n @return Error code"]
    pub fn ext4_fs_alloc_inode(
        fs: *mut ext4_fs,
        inode_ref: *mut ext4_inode_ref,
        filetype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Release i-node and mark it as free.\n @param inode_ref I-node to be released\n @return Error code"]
    pub fn ext4_fs_free_inode(inode_ref: *mut ext4_inode_ref) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Truncate i-node data blocks.\n @param inode_ref I-node to be truncated\n @param new_size  New size of inode (must be < current size)\n @return Error code"]
    pub fn ext4_fs_truncate_inode(
        inode_ref: *mut ext4_inode_ref,
        new_size: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Compute 'goal' for inode index\n @param inode_ref Reference to inode, to allocate block for\n @return goal"]
    pub fn ext4_fs_inode_to_goal_block(inode_ref: *mut ext4_inode_ref) -> ext4_fsblk_t;
}
unsafe extern "C" {
    #[doc = "@brief Compute 'goal' for allocation algorithm (For blockmap).\n @param inode_ref Reference to inode, to allocate block for\n @return error code"]
    pub fn ext4_fs_indirect_find_goal(
        inode_ref: *mut ext4_inode_ref,
        goal: *mut ext4_fsblk_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get physical block address by logical index of the block.\n @param inode_ref I-node to read block address from\n @param iblock            Logical index of block\n @param fblock            Output pointer for return physical\n                          block address\n @param support_unwritten Indicate whether unwritten block range\n                          is supported under the current context\n @return Error code"]
    pub fn ext4_fs_get_inode_dblk_idx(
        inode_ref: *mut ext4_inode_ref,
        iblock: ext4_lblk_t,
        fblock: *mut ext4_fsblk_t,
        support_unwritten: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Initialize a part of unwritten range of the inode.\n @param inode_ref I-node to proceed on.\n @param iblock    Logical index of block\n @param fblock    Output pointer for return physical block address\n @return Error code"]
    pub fn ext4_fs_init_inode_dblk_idx(
        inode_ref: *mut ext4_inode_ref,
        iblock: ext4_lblk_t,
        fblock: *mut ext4_fsblk_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Append following logical block to the i-node.\n @param inode_ref I-node to append block to\n @param fblock    Output physical block address of newly allocated block\n @param iblock    Output logical number of newly allocated block\n @return Error code"]
    pub fn ext4_fs_append_inode_dblk(
        inode_ref: *mut ext4_inode_ref,
        fblock: *mut ext4_fsblk_t,
        iblock: *mut ext4_lblk_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ext4_fs_insert_inode_dblk(
        inode_ref: *mut ext4_inode_ref,
        fblock: *mut ext4_fsblk_t,
        iblock: ext4_lblk_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Increment inode link count.\n @param   inode_ref none handle"]
    pub fn ext4_fs_inode_links_count_inc(inode_ref: *mut ext4_inode_ref);
}
unsafe extern "C" {
    #[doc = "@brief   Decrement inode link count.\n @param   inode_ref none handle"]
    pub fn ext4_fs_inode_links_count_dec(inode_ref: *mut ext4_inode_ref);
}
unsafe extern "C" {
    #[doc = "@brief   Returns a block group count.\n @param   s superblock descriptor\n @return  count of block groups"]
    pub fn ext4_block_group_cnt(s: *mut ext4_sblock) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief   Returns block count in block group\n          (last block group may have less blocks)\n @param   s superblock descriptor\n @param   bgid block group id\n @return  blocks count"]
    pub fn ext4_blocks_in_group_cnt(s: *mut ext4_sblock, bgid: u32) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief   Returns inodes count in block group\n          (last block group may have less inodes)\n @param   s superblock descriptor\n @param   bgid block group id\n @return  inodes count"]
    pub fn ext4_inodes_in_group_cnt(s: *mut ext4_sblock, bgid: u32) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief   Superblock write.\n @param   bdev block device descriptor.\n @param   s superblock descriptor\n @return  Standard error code"]
    pub fn ext4_sb_write(bdev: *mut ext4_blockdev, s: *mut ext4_sblock) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Superblock read.\n @param   bdev block device descriptor.\n @param   s superblock descriptor\n @return  Standard error code"]
    pub fn ext4_sb_read(bdev: *mut ext4_blockdev, s: *mut ext4_sblock) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief   Superblock simple validation.\n @param   s superblock descriptor\n @return  true if OK"]
    pub fn ext4_sb_check(s: *mut ext4_sblock) -> bool;
}
unsafe extern "C" {
    #[doc = "@brief   Superblock presence in block group.\n @param   s superblock descriptor\n @param   block_group block group id\n @return  true if block group has superblock"]
    pub fn ext4_sb_is_super_in_bg(s: *mut ext4_sblock, block_group: u32) -> bool;
}
unsafe extern "C" {
    #[doc = "@brief   TODO:"]
    pub fn ext4_sb_sparse(group: u32) -> bool;
}
unsafe extern "C" {
    #[doc = "@brief   TODO:"]
    pub fn ext4_bg_num_gdb(s: *mut ext4_sblock, group: u32) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief   TODO:"]
    pub fn ext4_num_base_meta_clusters(s: *mut ext4_sblock, block_group: u32) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_iter {
    pub inode_ref: *mut ext4_inode_ref,
    pub curr_blk: ext4_block,
    pub curr_off: u64,
    pub curr: *mut ext4_dir_en,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_iter"][::std::mem::size_of::<ext4_dir_iter>() - 48usize];
    ["Alignment of ext4_dir_iter"][::std::mem::align_of::<ext4_dir_iter>() - 8usize];
    ["Offset of field: ext4_dir_iter::inode_ref"]
        [::std::mem::offset_of!(ext4_dir_iter, inode_ref) - 0usize];
    ["Offset of field: ext4_dir_iter::curr_blk"]
        [::std::mem::offset_of!(ext4_dir_iter, curr_blk) - 8usize];
    ["Offset of field: ext4_dir_iter::curr_off"]
        [::std::mem::offset_of!(ext4_dir_iter, curr_off) - 32usize];
    ["Offset of field: ext4_dir_iter::curr"][::std::mem::offset_of!(ext4_dir_iter, curr) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_dir_search_result {
    pub block: ext4_block,
    pub dentry: *mut ext4_dir_en,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext4_dir_search_result"][::std::mem::size_of::<ext4_dir_search_result>() - 32usize];
    ["Alignment of ext4_dir_search_result"]
        [::std::mem::align_of::<ext4_dir_search_result>() - 8usize];
    ["Offset of field: ext4_dir_search_result::block"]
        [::std::mem::offset_of!(ext4_dir_search_result, block) - 0usize];
    ["Offset of field: ext4_dir_search_result::dentry"]
        [::std::mem::offset_of!(ext4_dir_search_result, dentry) - 24usize];
};
unsafe extern "C" {
    #[doc = "@brief Verify checksum of a linear directory leaf block\n @param inode_ref Directory i-node\n @param dirent    Linear directory leaf block\n @return true means the block passed checksum verification"]
    pub fn ext4_dir_csum_verify(inode_ref: *mut ext4_inode_ref, dirent: *mut ext4_dir_en) -> bool;
}
unsafe extern "C" {
    #[doc = "@brief Initialize directory iterator.\n Set position to the first valid entry from the required position.\n @param it        Pointer to iterator to be initialized\n @param inode_ref Directory i-node\n @param pos       Position to start reading entries from\n @return Error code"]
    pub fn ext4_dir_iterator_init(
        it: *mut ext4_dir_iter,
        inode_ref: *mut ext4_inode_ref,
        pos: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Jump to the next valid entry\n @param it Initialized iterator\n @return Error code"]
    pub fn ext4_dir_iterator_next(it: *mut ext4_dir_iter) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Uninitialize directory iterator.\n        Release all allocated structures.\n @param it Iterator to be finished\n @return Error code"]
    pub fn ext4_dir_iterator_fini(it: *mut ext4_dir_iter) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Write directory entry to concrete data block.\n @param sb        Superblock\n @param en     Pointer to entry to be written\n @param entry_len Length of new entry\n @param child     Child i-node to be written to new entry\n @param name      Name of the new entry\n @param name_len  Length of entry name"]
    pub fn ext4_dir_write_entry(
        sb: *mut ext4_sblock,
        en: *mut ext4_dir_en,
        entry_len: u16,
        child: *mut ext4_inode_ref,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    );
}
unsafe extern "C" {
    #[doc = "@brief Add new entry to the directory.\n @param parent Directory i-node\n @param name   Name of new entry\n @param child  I-node to be referenced from new entry\n @return Error code"]
    pub fn ext4_dir_add_entry(
        parent: *mut ext4_inode_ref,
        name: *const ::std::os::raw::c_char,
        name_len: u32,
        child: *mut ext4_inode_ref,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Find directory entry with passed name.\n @param result Result structure to be returned if entry found\n @param parent Directory i-node\n @param name   Name of entry to be found\n @param name_len  Name length\n @return Error code"]
    pub fn ext4_dir_find_entry(
        result: *mut ext4_dir_search_result,
        parent: *mut ext4_inode_ref,
        name: *const ::std::os::raw::c_char,
        name_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Remove directory entry.\n @param parent Directory i-node\n @param name   Name of the entry to be removed\n @param name_len  Name length\n @return Error code"]
    pub fn ext4_dir_remove_entry(
        parent: *mut ext4_inode_ref,
        name: *const ::std::os::raw::c_char,
        name_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Try to insert entry to concrete data block.\n @param sb           Superblock\n @param inode_ref    Directory i-node\n @param dst_blk      Block to try to insert entry to\n @param child        Child i-node to be inserted by new entry\n @param name         Name of the new entry\n @param name_len     Length of the new entry name\n @return Error code"]
    pub fn ext4_dir_try_insert_entry(
        sb: *mut ext4_sblock,
        inode_ref: *mut ext4_inode_ref,
        dst_blk: *mut ext4_block,
        child: *mut ext4_inode_ref,
        name: *const ::std::os::raw::c_char,
        name_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Try to find entry in block by name.\n @param block     Block containing entries\n @param sb        Superblock\n @param name_len  Length of entry name\n @param name      Name of entry to be found\n @param res_entry Output pointer to found entry, NULL if not found\n @return Error code"]
    pub fn ext4_dir_find_in_block(
        block: *mut ext4_block,
        sb: *mut ext4_sblock,
        name_len: usize,
        name: *const ::std::os::raw::c_char,
        res_entry: *mut *mut ext4_dir_en,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Simple function to release allocated data from result.\n @param parent Parent inode\n @param result Search result to destroy\n @return Error code\n"]
    pub fn ext4_dir_destroy_result(
        parent: *mut ext4_inode_ref,
        result: *mut ext4_dir_search_result,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ext4_dir_set_csum(inode_ref: *mut ext4_inode_ref, dirent: *mut ext4_dir_en);
}
unsafe extern "C" {
    pub fn ext4_dir_init_entry_tail(t: *mut ext4_dir_entry_tail);
}
unsafe extern "C" {
    #[doc = "@brief Get mode of the i-node.\n @param sb    Superblock\n @param inode I-node to load mode from\n @return Mode of the i-node"]
    pub fn ext4_inode_get_mode(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set mode of the i-node.\n @param sb    Superblock\n @param inode I-node to set mode to\n @param mode  Mode to set to i-node"]
    pub fn ext4_inode_set_mode(sb: *mut ext4_sblock, inode: *mut ext4_inode, mode: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get ID of the i-node owner (user id).\n @param inode I-node to load uid from\n @return User ID of the i-node owner"]
    pub fn ext4_inode_get_uid(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set ID of the i-node owner.\n @param inode I-node to set uid to\n @param uid   ID of the i-node owner"]
    pub fn ext4_inode_set_uid(inode: *mut ext4_inode, uid: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get real i-node size.\n @param sb    Superblock\n @param inode I-node to load size from\n @return Real size of i-node"]
    pub fn ext4_inode_get_size(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u64;
}
unsafe extern "C" {
    #[doc = "@brief Set real i-node size.\n @param inode I-node to set size to\n @param size  Size of the i-node"]
    pub fn ext4_inode_set_size(inode: *mut ext4_inode, size: u64);
}
unsafe extern "C" {
    #[doc = "@brief Get time, when i-node was last accessed.\n @param inode I-node\n @return Time of the last access (POSIX)"]
    pub fn ext4_inode_get_access_time(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set time, when i-node was last accessed.\n @param inode I-node\n @param time  Time of the last access (POSIX)"]
    pub fn ext4_inode_set_access_time(inode: *mut ext4_inode, time: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get time, when i-node was last changed.\n @param inode I-node\n @return Time of the last change (POSIX)"]
    pub fn ext4_inode_get_change_inode_time(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set time, when i-node was last changed.\n @param inode I-node\n @param time  Time of the last change (POSIX)"]
    pub fn ext4_inode_set_change_inode_time(inode: *mut ext4_inode, time: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get time, when i-node content was last modified.\n @param inode I-node\n @return Time of the last content modification (POSIX)"]
    pub fn ext4_inode_get_modif_time(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set time, when i-node content was last modified.\n @param inode I-node\n @param time  Time of the last content modification (POSIX)"]
    pub fn ext4_inode_set_modif_time(inode: *mut ext4_inode, time: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get time, when i-node was deleted.\n @param inode I-node\n @return Time of the delete action (POSIX)"]
    pub fn ext4_inode_get_del_time(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set time, when i-node was deleted.\n @param inode I-node\n @param time  Time of the delete action (POSIX)"]
    pub fn ext4_inode_set_del_time(inode: *mut ext4_inode, time: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get ID of the i-node owner's group.\n @param inode I-node to load gid from\n @return Group ID of the i-node owner"]
    pub fn ext4_inode_get_gid(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set ID to the i-node owner's group.\n @param inode I-node to set gid to\n @param gid   Group ID of the i-node owner"]
    pub fn ext4_inode_set_gid(inode: *mut ext4_inode, gid: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get number of links to i-node.\n @param inode I-node to load number of links from\n @return Number of links to i-node"]
    pub fn ext4_inode_get_links_cnt(inode: *mut ext4_inode) -> u16;
}
unsafe extern "C" {
    #[doc = "@brief Set number of links to i-node.\n @param inode I-node to set number of links to\n @param cnt Number of links to i-node"]
    pub fn ext4_inode_set_links_cnt(inode: *mut ext4_inode, cnt: u16);
}
unsafe extern "C" {
    #[doc = "@brief Get number of 512-bytes blocks used for i-node.\n @param sb    Superblock\n @param inode I-node\n @return Number of 512-bytes blocks"]
    pub fn ext4_inode_get_blocks_count(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u64;
}
unsafe extern "C" {
    #[doc = "@brief Set number of 512-bytes blocks used for i-node.\n @param sb    Superblock\n @param inode I-node\n @param cnt Number of 512-bytes blocks\n @return Error code"]
    pub fn ext4_inode_set_blocks_count(
        sb: *mut ext4_sblock,
        inode: *mut ext4_inode,
        cnt: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = "@brief Get flags (features) of i-node.\n @param inode I-node to get flags from\n @return Flags (bitmap)"]
    pub fn ext4_inode_get_flags(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set flags (features) of i-node.\n @param inode I-node to set flags to\n @param flags Flags to set to i-node"]
    pub fn ext4_inode_set_flags(inode: *mut ext4_inode, flags: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get file generation (used by NFS).\n @param inode I-node\n @return File generation"]
    pub fn ext4_inode_get_generation(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set file generation (used by NFS).\n @param inode      I-node\n @param gen File generation"]
    pub fn ext4_inode_set_generation(inode: *mut ext4_inode, gen_: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get extra I-node size field.\n @param sb         Superblock\n @param inode      I-node\n @return extra I-node size"]
    pub fn ext4_inode_get_extra_isize(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u16;
}
unsafe extern "C" {
    #[doc = "@brief Set extra I-node size field.\n @param sb         Superblock\n @param inode      I-node\n @param size       extra I-node size"]
    pub fn ext4_inode_set_extra_isize(sb: *mut ext4_sblock, inode: *mut ext4_inode, size: u16);
}
unsafe extern "C" {
    #[doc = "@brief Get address of block, where are extended attributes located.\n @param inode I-node\n @param sb    Superblock\n @return Block address"]
    pub fn ext4_inode_get_file_acl(inode: *mut ext4_inode, sb: *mut ext4_sblock) -> u64;
}
unsafe extern "C" {
    #[doc = "@brief Set address of block, where are extended attributes located.\n @param inode    I-node\n @param sb       Superblock\n @param acl Block address"]
    pub fn ext4_inode_set_file_acl(inode: *mut ext4_inode, sb: *mut ext4_sblock, acl: u64);
}
unsafe extern "C" {
    #[doc = "@brief Get block address of specified direct block.\n @param inode I-node to load block from\n @param idx   Index of logical block\n @return Physical block address"]
    pub fn ext4_inode_get_direct_block(inode: *mut ext4_inode, idx: u32) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set block address of specified direct block.\n @param inode  I-node to set block address to\n @param idx    Index of logical block\n @param block Physical block address"]
    pub fn ext4_inode_set_direct_block(inode: *mut ext4_inode, idx: u32, block: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get block address of specified indirect block.\n @param inode I-node to get block address from\n @param idx   Index of indirect block\n @return Physical block address"]
    pub fn ext4_inode_get_indirect_block(inode: *mut ext4_inode, idx: u32) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set block address of specified indirect block.\n @param inode  I-node to set block address to\n @param idx    Index of indirect block\n @param block Physical block address"]
    pub fn ext4_inode_set_indirect_block(inode: *mut ext4_inode, idx: u32, block: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get device number\n @param inode  I-node to get device number from\n @return Device number"]
    pub fn ext4_inode_get_dev(inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Set device number\n @param inode  I-node to set device number to\n @param dev    Device number"]
    pub fn ext4_inode_set_dev(inode: *mut ext4_inode, dev: u32);
}
unsafe extern "C" {
    #[doc = "@brief return the type of i-node\n @param sb    Superblock\n @param inode I-node to return the type of\n @return Result of check operation"]
    pub fn ext4_inode_type(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Check if i-node has specified type.\n @param sb    Superblock\n @param inode I-node to check type of\n @param type  Type to check\n @return Result of check operation"]
    pub fn ext4_inode_is_type(sb: *mut ext4_sblock, inode: *mut ext4_inode, type_: u32) -> bool;
}
unsafe extern "C" {
    #[doc = "@brief Check if i-node has specified flag.\n @param inode I-node to check flags of\n @param f  Flag to check\n @return Result of check operation"]
    pub fn ext4_inode_has_flag(inode: *mut ext4_inode, f: u32) -> bool;
}
unsafe extern "C" {
    #[doc = "@brief Remove specified flag from i-node.\n @param inode      I-node to clear flag on\n @param f Flag to be cleared"]
    pub fn ext4_inode_clear_flag(inode: *mut ext4_inode, f: u32);
}
unsafe extern "C" {
    #[doc = "@brief Set specified flag to i-node.\n @param inode    I-node to set flag on\n @param f Flag to be set"]
    pub fn ext4_inode_set_flag(inode: *mut ext4_inode, f: u32);
}
unsafe extern "C" {
    #[doc = "@brief Get inode checksum(crc32)\n @param sb    Superblock\n @param inode I-node to get checksum value from"]
    pub fn ext4_inode_get_csum(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> u32;
}
unsafe extern "C" {
    #[doc = "@brief Get inode checksum(crc32)\n @param sb    Superblock\n @param inode I-node to get checksum value from"]
    pub fn ext4_inode_set_csum(sb: *mut ext4_sblock, inode: *mut ext4_inode, checksum: u32);
}
unsafe extern "C" {
    #[doc = "@brief Check if i-node can be truncated.\n @param sb    Superblock\n @param inode I-node to check\n @return Result of the check operation"]
    pub fn ext4_inode_can_truncate(sb: *mut ext4_sblock, inode: *mut ext4_inode) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext4_extent_header {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[doc = "@brief Get extent header from the root of the extent tree.\n @param inode I-node to get extent header from\n @return Pointer to extent header of the root node"]
    pub fn ext4_inode_get_extent_header(inode: *mut ext4_inode) -> *mut ext4_extent_header;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_fs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_journal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jbd_trans {
    pub _address: u8,
}
